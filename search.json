[{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://permaverse.github.io/flipr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://permaverse.github.io/flipr/articles/alternative.html","id":"traditional-nhst","dir":"Articles","previous_headings":"","what":"Traditional NHST","title":"The alternative hypothesis in permutation testing","text":"traditional approach NHST pertains specifying null distribution H0H_0 like reject favor alternative hypothesis HaH_a given statistical evidence form data samples. example, study effect drug amount sugar blood patients diagnosed diabetes, might take two samples two distinct populations, one gave placebo one gave treatment. point, goal show average amount sugar treatment group lower one placebo group. Hence, suitable test answering question given following hypotheses: H0:μtreatment≥μplaceboagainstHa:μtreatment<μplacebo H_0: \\mu_\\mathrm{treatment} \\ge \\mu_\\mathrm{placebo} \\quad \\mbox{} \\quad H_a: \\mu_\\mathrm{treatment} < \\mu_\\mathrm{placebo} suggested intuition, alternative hypothesis first determined basis aim proving null hypothesis H0H_0 deduced complementary event HaH_a.","code":""},{"path":"https://permaverse.github.io/flipr/articles/alternative.html","id":"permutation-nhst","dir":"Articles","previous_headings":"","what":"Permutation NHST","title":"The alternative hypothesis in permutation testing","text":"permutation framework completely redefines null alternative hypotheses respect traditional approach: null hypothesis always tests performed permutation framework. design. effect, idea using permutations approach null distribution relies assumption data exchangeability H0H_0. means null hypothesis always needs two samples drawn underlying distribution. Hence, two independent samples X1,…,Xnx∼..d.FXX_1, \\dots, X_{n_x} \\stackrel{..d.}{\\sim} F_X Y1,…,Yny∼..d.FYY_1, \\dots, Y_{n_y} \\stackrel{..d.}{\\sim} F_Y, null hypothesis two-sample problem necessarily: H0:FX=FY. H_0: F_X = F_Y. alternative hypothesis complementary event H0H_0. effect, FX≠FYF_X \\neq F_Y. However, millions reasons true. practice, use specific test statistic targets aspect(s) distributions. instance, one uses Hotelling’s T2T^2 statistic, focus put finding differences first-order moment two distributions FXF_X FYF_Y. two differences generate huge change paradigm interpreting results. effect, suppose permutation test using Hotelling’s T2T^2 statistic reveals enough evidence reject null hypothesis. imply, means, can assume two samples come distribution, , know, data contain enough evidence identify differences variance higher moments.","code":""},{"path":"https://permaverse.github.io/flipr/articles/alternative.html","id":"non-parametric-combination","dir":"Articles","previous_headings":"","what":"Non-Parametric Combination","title":"The alternative hypothesis in permutation testing","text":"sample mm permutations mtm_t possible ones, can fact compute values many test statistics T(1),…,T(L)T^{(1)}, \\dots, T^{(L)} want. point, might want use unbiased estimator p∞̂(ℓ)=B(ℓ)m\\widehat{p_\\infty}^{(\\ell)} = \\frac{B^{(\\ell)}}{m} p-value p∞(ℓ)=ℙ(T(ℓ)≥tobs(ℓ))p_\\infty^{(\\ell)} = \\mathbb{P} \\left( T^{(\\ell)} \\ge t_\\mathrm{obs}^{(\\ell)} \\right) test statistic produce LL p-value estimates, one targeting different aspect distributions investigation. Since evidence summarized p-values, scale even though might look different features distributions. can therefore combined various ways provide single test statistic value used testing procedure. several possible combining functions fusion p-values. package flipr currently implements: Tippett’s combining function: Tippett(p1,…,pL)=1−minℓ∈1,…,Lpℓ\\mathrm{Tippett}(p_1, …, p_L) = 1 - \\min_{\\ell \\1, \\dots, L} p_\\ell; , Fisher’s combining function: Fisher(p1,…,pL)=−2∑ℓ=1Llogpℓ\\mathrm{Fisher}(p_1, …, p_L) = -2 \\sum_{\\ell=1}^L \\log p_\\ell. choice combining function made optional argument combining_function takes string value. moment, accepts either \"tippett\" \"fisher\" picking one two -mentioned combining functions.","code":""},{"path":[]},{"path":"https://permaverse.github.io/flipr/articles/anova.html","id":"plausibility-function-for-1-anova","dir":"Articles","previous_headings":"","what":"Plausibility function for 1-ANOVA 🐓","title":"Performing ANOVA","text":"example, data represent chicken weights feed type. three populations fed different types food. null hypothesis H0:μ1=μ2=μ3 H_0: \\mu_1 = \\mu_2 = \\mu_3 μi\\mu_i representing sample mean group ii.","code":"data <- chickwts$weight[1:36] # 1 variable memberships <- as.factor(chickwts$feed[1:36]) # 1 factor with 3 populations  # takes all samples except the first one null_spec <- function(l, parameters) {   purrr::map2(l, parameters, \\(l, param) l - param) } stat_functions <- list(stat_anova_f)  # all means except first one stat_assignments <- list(mu2 = 1, mu3 = 1)  pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   data, memberships ) pf$set_alternative(\"right_tail\")  pvalue1 <- pf$get_value(rep(0, 2)) pvalue1 #> [1] 0.002997003 samples <- purrr::map(unique(as.numeric(memberships)), \\(.class) {   data[which(as.numeric(memberships) == .class)] }) means <- c(mean(samples[[2]]) - mean(samples[[1]]),            mean(samples[[3]]) - mean(samples[[1]])) pvalue1_est <- pf$get_value(means) pvalue1_est #> [1] 1 pf$set_point_estimate(means) point_estimate1 <- pf$point_estimate point_estimate1 #>      mu2      mu3  #> 58.55000 86.22857 pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = pf$max_conf_level )  pf$set_grid(   parameters = pf$parameters,   npoints = 10 ) pf$evaluate_grid(grid = pf$grid) grid1 <- pf$grid grid1 %>%    ggplot(aes(mu2, mu3, z = pvalue)) +    geom_contour_filled(binwidth = 0.05) +    labs(     title = \"Contour plot of the p-value surface\",      subtitle = \"Using Fisher's non-parametric combination\",      x = expression(paste(mu, \"_2\")),      y = expression(paste(mu, \"_3\")),      fill = \"p-value\"   ) +    theme_minimal()"},{"path":"https://permaverse.github.io/flipr/articles/anova.html","id":"plausibility-function-for-2-anova","dir":"Articles","previous_headings":"","what":"Plausibility function for 2-ANOVA 🌸","title":"Performing ANOVA","text":"example, data used represent flower caracteristics specie. variables sepal length sepal width compared bewteen three different flower species. null hypothesis H0:(μ11μ12)=(μ21μ22)=(μ31μ32) H_0: \\begin{pmatrix} \\mu_{11} \\\\ \\mu_{12} \\end{pmatrix} = \\begin{pmatrix} \\mu_{21} \\\\ \\mu_{22} \\end{pmatrix} = \\begin{pmatrix} \\mu_{31} \\\\ \\mu_{32} \\end{pmatrix} μij\\mu_{ij} representing sample mean group ii variable jj.","code":"iris_setosa <- iris |> filter(Species == \"setosa\") iris_setosa <- iris_setosa[1:10,1:2] iris_versicolor <- iris |> filter(Species == \"versicolor\") iris_versicolor <- iris_versicolor[1:10,1:2] iris_virginica <- iris |> filter(Species == \"virginica\") iris_virginica <- iris_virginica[1:10,1:2]  # takes all samples except the first one null_spec <- function(l, parameters) {   parameters <- split(parameters, ceiling(seq_along(parameters) / (length(parameters)/length(l))))   purrr::map2(l, parameters, \\(group, params) {     purrr::map2(group, params, \\(var, param) {       var - param     }) |> as.data.frame()   }) } stat_functions <- list(stat_anova_f)  # all means except ones from first sample stat_assignments <- list(   mu2_1 = 1, mu2_2 = 1,   mu3_1 = 1, mu3_2 = 1)  pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   iris_setosa, iris_versicolor, iris_virginica ) pf$set_alternative(\"right_tail\")  pvalue2 <- pf$get_value(rep(0, 4)) pvalue2 #> [1] 0.000999001 d1 <- c(   mean(iris_versicolor$Sepal.Length) - mean(iris_setosa$Sepal.Length),   mean(iris_versicolor$Sepal.Width)  - mean(iris_setosa$Sepal.Width) ) d2 <- c(   mean(iris_virginica$Sepal.Length) - mean(iris_setosa$Sepal.Length),   mean(iris_virginica$Sepal.Width)  - mean(iris_setosa$Sepal.Width) ) pvalue1_est <- pf$get_value(c(d1, d2)) pvalue1_est #> [1] 1 pf$set_point_estimate(c(d1, d2)) point_estimate2 <- pf$point_estimate point_estimate2 #> mu2_1 mu2_2 mu3_1 mu3_2  #>  1.24 -0.44  1.71 -0.37 pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = pf$max_conf_level )  pf$set_grid(   parameters = pf$parameters,   npoints = 10 ) pf$evaluate_grid(grid = pf$grid)  grid2 <- pf$grid grid2 |> dplyr::filter(pvalue > 0.99) #> # A tibble: 1 × 5 #>   mu2_1 mu2_2 mu3_1 mu3_2 pvalue #>   <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1  1.24 -0.44  1.71 -0.37      1"},{"path":"https://permaverse.github.io/flipr/articles/anova.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Performing ANOVA","text":"two examples, means different population. Thus, test equality means get_value(0), get pvalue close 0, allowing us reject hypothesis means equal within different populations. hand, get pvalue test estimator values, equal 1, largest possible value, coherent.","code":""},{"path":"https://permaverse.github.io/flipr/articles/exactness.html","id":"traditional-formulation-of-a-statistical-test","dir":"Articles","previous_headings":"","what":"Traditional formulation of a statistical test","title":"On the exactness of permutation tests","text":"statistical test aims determining whether observed data can considered strong evidence favor -called alternative hypothesis HaH_a compared -called null hypothesis H0H_0. , test statistic TT defined : observed value H0H_0 can computed observed data; large values statistic evidence favor HaH_a. know (approximation ) distribution TT null hypothesis, also known null distribution. test statistic available observe data, can denote tobst_\\mathrm{obs} value test statistic computed observed data define -called p-value null hypothesis tail probability: p∞=ℙH0(T≥tobs). p_\\infty = \\mathbb{P}_{H_0} \\left( T \\ge t_\\mathrm{obs} \\right). p-value p∞p_\\infty definition uniformly distributed (0,1)(0,1) null hypothesis. Hence, can define -called significance level α∈(0,1)\\alpha \\(0,1) decide reject H0H_0 favor H1H_1 p∞≤αp_\\infty \\le \\alpha. , probability wrongly rejecting H0H_0, also known probability type errors, simply: ℙH0(p∞≤α)=α. \\mathbb{P}_{H_0} \\left( p_\\infty \\le \\alpha \\right) = \\alpha. significance level α\\alpha therefore matches design probability type errors, means choosing α\\alpha allows control probability type errors. say test exact. null distribution TT known, access p∞p_\\infty. possible solution resort resampling techniques approach null hypothesis. get approximate null distribution, question compute p-value provides exact statistical test. two approaches problem: first estimates true p-value p∞p_\\infty approximate null distribution second proposes alternative definition p-value can straightforwardly computed. Let us expand approaches.","code":""},{"path":"https://permaverse.github.io/flipr/articles/exactness.html","id":"the-two-sample-problem-in-a-permutational-framework","dir":"Articles","previous_headings":"","what":"The two-sample problem in a permutational framework","title":"On the exactness of permutation tests","text":"start two samples X1,…,Xnx∼iid𝒟(θx)X_1, \\dots, X_{n_x} \\stackrel{iid}{\\sim} \\mathcal{D}(\\theta_x) Y1,…,Yny∼iid𝒟(θy)Y_1, \\dots, Y_{n_y} \\stackrel{iid}{\\sim} \\mathcal{D}(\\theta_y). want know whether two distributions basis two samples collected. parametric setting, boils testing following hypotheses: H0:θx=θyvsθx≠θy. H_0: \\theta_x = \\theta_y \\quad \\mbox{vs} \\quad \\theta_x \\neq \\theta_y. Let TT statistic depends two samples suited elucidating test, .e.: can compute observed value null hypothesis observed data; large values statistic evidence favor alternative hypothesis. Now, performing test, one also know (approximation ) distribution TT null hypothesis, also known null distribution, p-value associated test can computed instance. one knows exact null distribution, need resort permutations. However, null distribution known, permutations come handy approaching . idea , null hypothesis, two samples come distribution. Hence, can pull together one big sample size n=nx+nyn = n_x + n_y generated common distribution. point, can split pooled sample two random subsets size nxn_x nyn_y respectively, use compute value statistic TT. repeat many times splitting strategy, say mm times, end mm values statistic can compute empirical distribution, known permutation distribution, approaches null distribution.","code":""},{"path":"https://permaverse.github.io/flipr/articles/exactness.html","id":"permutation-p-value-as-an-unbiased-estimator-of-p_infty","dir":"Articles","previous_headings":"","what":"Permutation p-value as an unbiased estimator of p∞p_\\infty","title":"On the exactness of permutation tests","text":"Let tobst_\\mathrm{obs} value statistic computed original two samples, mm number permutations used approach null distribution BB random variable counts number test statistic values greater equal tobst_\\mathrm{obs}. definition, random variable BB follows binomial distribution size mm rate success p∞p_\\infty. Hence, can define following unbiased estimator p∞p_\\infty: p∞̂=Bm. \\widehat{p_\\infty} = \\frac{B}{m}. However, one uses estimator p-value purpose hypothesis testing, resulting test exact. Let us investigate . First, remember true p-value p∞p_\\infty random variable , sense value changes soon tobst_\\mathrm{obs} changes .e. time whole experiment reconducted. Hence, probability wrongly rejecting null hypothesis using p∞̂\\widehat{p_\\infty} reads: ℙ(p∞̂≤α)=∫ℝℙ(p∞̂≤α|p)fp∞(p)dp=∫01ℙ(p∞̂≤α|p)dp, \\mathbb{P} \\left( \\widehat{p_\\infty} \\le \\alpha \\right) = \\int_\\mathbb{R} \\mathbb{P} \\left( \\widehat{p_\\infty} \\le \\alpha | p \\right) f_{p_\\infty}(p) dp = \\int_0^1 \\mathbb{P} \\left( \\widehat{p_\\infty} \\le \\alpha | p \\right) dp, p∞p_\\infty uniformly distributed (0,1)(0,1) null hypothesis. Next, notice p∞̂\\widehat{p_\\infty} can take finite set values {0,1m,2m,…,m−1m,1}\\left\\{ 0, \\frac{1}{m}, \\frac{2}{m}, \\dots, \\frac{m-1}{m}, 1 \\right\\}. Hence, b∈0,1,…,mb \\0, 1, \\dots, m: ℙ(p∞̂=bm)=∫01ℙ(p∞̂=bm|p)dp=∫01(mb)pb(1−p)m−bdp=1m+1. \\mathbb{P} \\left( \\widehat{p_\\infty} = \\frac{b}{m} \\right) = \\int_0^1 \\mathbb{P} \\left( \\widehat{p_\\infty} = \\left. \\frac{b}{m} \\right| p \\right) dp = \\int_0^1 \\binom{m}{b} p^b (1-p)^{m-b} dp = \\frac{1}{m + 1}. can therefore deduce : ℙ(p∞̂≤α)=⌊mα⌋+1m+1≠α. \\mathbb{P} \\left( \\widehat{p_\\infty} \\le \\alpha \\right) = \\frac{\\lfloor m \\alpha \\rfloor + 1}{m + 1} \\neq \\alpha. following R code shows graphically using p∞̂\\widehat{p_\\infty} p-value provide exact test:","code":"alpha <- seq(0.01, 0.1, by = 0.01) m <- c(10, 100, 1000) p1 <- crossing(alpha, m) %>%    mutate(     p = (floor(m * alpha) + 1) / (m + 1),      mf = paste(\"m =\", m)   ) %>%    ggplot(aes(alpha, p, color = mf)) +    geom_point() +    geom_abline(aes(intercept = 0, slope = 1)) +    labs(     x = \"Significance level\",     y = \"Probability of wrongly rejecting H0\"   ) +    facet_wrap(vars(mf)) +    scale_color_viridis_d() +    scale_y_continuous(limits = c(0, 0.1)) +    coord_equal() +    theme_bw() fig <- p1 %>%    plotly::ggplotly() %>%    plotly::hide_legend() htmlwidgets::saveWidget(   widget = fig,    file = \"exactness-fig1.html\",    selfcontained = rmarkdown::pandoc_available(\"1.12.3\") ) htmltools::tags$iframe(   src = \"exactness-fig1.html\",   scrolling = \"no\",    seamless = \"seamless\",   frameBorder = \"0\",   width = \"100%\",    height = 400 )"},{"path":"https://permaverse.github.io/flipr/articles/exactness.html","id":"permutation-p-value-as-the-tail-probability-of-a-resampling-distribution","dir":"Articles","previous_headings":"","what":"Permutation p-value as the tail probability of a resampling distribution","title":"On the exactness of permutation tests","text":"alternative strategy define p-value looking random variable BB instead test statistic TT. p-value tail probability null distribution, context randomization tests, can define tail probability distribution BB. Given fixed number mm sampled permutations, recall random variable BB counts number test statistic values larger equal tobst_\\mathrm{obs}. Hence, alternative equivalent definition p-value given -called exact permutation p-value: pe=ℙH0(B≤b), p_e = \\mathbb{P}_{H_0} \\left( B \\le b \\right), bb observed number test statistics larger equal tobst_\\mathrm{obs} (using observed sample permutations drawn). Let BtB_t random variable counts total number possible distinct test statistic values exceeding tobst_\\mathrm{obs} recall mtm_t total number possible distinct permutations. denote pt=Bt+1mt+1, p_t = \\frac{B_t + 1}{m_t + 1}, permutation p-value exhaustive list permutations used. seen , straightforward show BtB_t follows discrete uniform distribution integers 0,…,mt0, \\dots, m_t , conditional Bt=btB_t = b_t, random variable BB follows binomial distribution size mm rate success ptp_t. can thus write: pe=∑bt=0BtℙH0(B≤b|Bt=bt)ℙH0(Bt=bt)=1mt+1∑bt=0BtFB(b;m,bt+1mt+1), p_e = \\sum_{b_t=0}^{B_t} \\mathbb{P}_{H_0} \\left( B \\le b | B_t = b_t \\right) \\mathbb{P}_{H_0} \\left( B_t = b_t \\right) = \\frac{1}{m_t + 1} \\sum_{b_t=0}^{B_t} F_B \\left( b; m, \\frac{b_t + 1}{m_t + 1} \\right),  FB(⋅;m,bt+1mt+1)F_B \\left( \\cdot; m, \\frac{b_t + 1}{m_t + 1} \\right) cumulative probability function binomial distribution size mm probability success bt+1mt+1\\frac{b_t + 1}{m_t + 1}. can computationally intense compute large values mtm_t, case one might use following integral approximation: pe≈b+1m+1−∫00.5mt+1FB(b;m,pt)dpt. p_e \\approx \\frac{b+1}{m+1} - \\int_0^{\\frac{0.5}{m_t+1}} F_B (b; m, p_t) dp_t. approximation shows exact p-value pep_e upper bounded pu=b+1m+1, p_u = \\frac{b+1}{m+1},  happens exact p-value case sampling permutations without replacement.","code":""},{"path":"https://permaverse.github.io/flipr/articles/exactness.html","id":"comparison-by-empirical-evidence","dir":"Articles","previous_headings":"","what":"Comparison by empirical evidence","title":"On the exactness of permutation tests","text":"flipr, perform permutation test using estimator p∞̂\\widehat{p_\\infty} p-value p∞p_\\infty setting type == \"estimate\". provides non-exact test unbiased estimate p∞p_\\infty. perform permutation test using permutation p-value pep_e setting type == \"exact\". provides exact test. also possibility using upper bound p-value pup_u using type == \"upper_bound\". following R code runs simulations empirically estimate probability wrongly rejecting null hypothesis. generative model samples standard normal distribution. Sample sizes set n1=n2=5n_1 = n_2 = 5. draw 2020 permutations test. used significance level 5%5\\%. simulation provides numerical evidence using permutation p-value pep_e yields exact test. design since pep_e genuine probability hence uniformly distributed (0,1)(0,1) null hypothesis. also observe upper bound pup_u close exact p-value pep_e. course, one might criticize simulation number permutations mm chosen small purpose prove point. effect, mm larger, formulae compute p-value yield asymptotically exact test. Quoting (Phipson Smyth 2010), true, urgent need avoid small mm disappears exact p-value pep_e used place p∞̂\\widehat{p_\\infty}, pep_e ensures valid statistical test regardless sample sizes number permutations. exact p-values used, penalty choosing mm small loss statistical power reject null hypothesis. : permutations generally provide greater power.","code":"# Parallelization future::plan(multisession, workers = availableCores())  # General setup nreps <- 1e4 n1 <- 5 n2 <- 5 set.seed(12345) sim <- map(sample.int(.Machine$integer.max, nreps, replace = TRUE), ~ {     list(       x = rnorm(n = n1, mean = 0, sd = 1),       y = rnorm(n = n2, mean = 0, sd = 1),       s = .x     )   })  library(tidyverse) null_spec <- function(y, parameters) {   map(y, ~ .x - parameters) } stat_functions <- list(stat_t) stat_assignments <- list(delta = 1) nperms <- 20 alpha <- 0.05  progressr::with_progress({   p <- progressr::progressor(steps = length(sim) / 10) # progress bar set up   ii <- 1    alpha_estimates <- furrr::future_map(sim, function(.l) {     if (ii %% 10 == 0) {p()} # progress bar update     ii <<- ii + 1     pf <- PlausibilityFunction$new(       null_spec = null_spec,       stat_functions = stat_functions,       stat_assignments = stat_assignments,       .l$x, .l$y,       seed = .l$s     )     pf$set_nperms(nperms)     pf$set_alternative(\"left_tail\")     pf$set_pvalue_formula(\"exact\")     pv_exact <- pf$get_value(0)     pf$set_pvalue_formula(\"upper_bound\")     pv_upper_bound <- pf$get_value(0)     pf$set_pvalue_formula(\"estimate\")     pv_estimate <- pf$get_value(0)     c(       exact       = pv_exact       <= alpha,       upper_bound = pv_upper_bound <= alpha,       estimate    = pv_estimate    <= alpha     )   }, .options = furrr_options(seed = TRUE)) %>%   transpose() %>%   simplify_all() %>%   map(mean) }) as_tibble(alpha_estimates) #> # A tibble: 1 × 3 #>    exact upper_bound estimate #>    <dbl>       <dbl>    <dbl> #> 1 0.0432      0.0432   0.0884"},{"path":[]},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"generation-of-the-toy-example","dir":"Articles","previous_headings":"","what":"Generation of the toy example","title":"A tour of permutation inference","text":"Let us work classic toy example. Suppose interested studying difference means two populations. generate: first sample size n1=10n_1 = 10 observations distribution mean 11 unit variance; second sample size n2=10n_2 = 10 observations distribution mean 44 unit variance. consider three different scenari: Scenario populations follow Gaussian distributions. Scenario B populations follow Gamma distributions. Scenario C first population follows Gaussian distribution second population follows Gamma distribution. scenario, goal make inference difference means two distributions. words, parameter interest δ=μ2−μ1\\delta = \\mu_2 - \\mu_1.","code":"n1 <- 10 n2 <- 10 mu1 <- 1 mu2 <- 4 sd1 <- 1 sd2 <- 1 B <- 100000 set.seed(1234) a1 <- rnorm(n1, mean = mu1, sd = sd1) a2 <- rnorm(n2, mean = mu2, sd = sd2) set.seed(1234) b1 <- rgamma(n1, shape = 1, rate = 1) b2 <- rgamma(n2, shape = 16, rate = 4) set.seed(1234) c1 <- rnorm(n1, mean = mu1, sd = sd1) c2 <- rgamma(n2, shape = 16, rate = 4)"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"the-plausibility-function","dir":"Articles","previous_headings":"","what":"The plausibility function","title":"A tour of permutation inference","text":"plausibility function mean difference curve represents variation pp-value test null hypothesis δ=δ0\\delta = \\delta_0 function δ0\\delta_0(Martin 2017; Fraser 2019; Infanger Schmidt-Trucksäss 2019). flipr, easy trace plausibility function. Three ingredients required alongside data instantiate function: null specification function tells flipr second sample transformed order make exchangeable first sample null hypothesis; list test statistics use detecting differences distributions generated two observed samples; list index assignments tells flipr test statistics use parameter investigation. context null hypothesis testing, consider null hypothesis H0:μy−μx=δH_0: \\mu_y - \\mu_x = \\delta. can use permutation scheme approach pp-value two samples exchangeable H0H_0. means need transform example second sample make exchangeable first sample H0H_0. simple example, can achieved follows. Let X1,…,Xnx∼𝒩(μx,1)X_1, \\dots, X_{n_x} \\sim \\mathcal{N}(\\mu_x, 1) Y1,…,Yny∼𝒩(μy,1)Y_1, \\dots, Y_{n_y} \\sim \\mathcal{N}(\\mu_y, 1). can transform second sample Yi←Yi−δY_i \\longleftarrow Y_i - \\delta. can define proper function , termed null specification function, takes two input arguments: y list storing data points second sample; parameters numeric vector values parameters investigation (δ\\delta thus parameters length 11 parameters[1] = delta). simple example, boils : Next, need decide test statistic(s) going use performing test. , interested one parameter, namely mean difference δ\\delta. Since two samples share variance, can use example tt-statistic pooled estimate common variance. statistic can easily computed using stats::t.test(x, y, var.equal = TRUE)$statistic. However, want extend evaluation permuted version data. Test statistic functions compatible flipr least two mandatory input arguments: data either concatenated list size nx+nyn_x + n_y regrouping data points samples distance matrix size (nx+ny)×(nx+ny)(n_x + n_y) \\times (n_x + n_y) stored object class dist. indices1 integer vector size nxn_x storing indices data points belonging first sample current permuted version data. flipr-compatible version t-statistic already implemented flipr ready use stat_student alias stat_t. , going use tt-statistic example, might willing use one statistic parameter might several parameters investigation, one requiring different test statistic. therefore group test statistics need single list: Finally need define named list tells flipr test statistics among ones declared stat_functions list used parameter investigation. used determine bounds parameter plausibility function. list, often termed stat_assignments, therefore many elements parameters investigation. element named parameter investigation list indices corresponding test statistics used parameter stat_functions. example, boils : flipr, plausibility function implemented R6Class object. Assume observed two samples stored lists x y, therefore instantiate plausibility function data follows: Now, assume want test following hypotheses: H0:δ=0v.s.H1:δ≠0. H_0: \\delta = 0 \\quad \\mbox{v.s.} \\quad H_1: \\delta \\ne 0. use $get_value() method purpose, essentially evaluates permutation pp-value two-sided test default: possible evaluate one-sided p-values well changing $alternative field $set_alternative() method, accepts two_tail, left_tail right_tail values.` default, number sampled permutations 1000L. accessible $nperms field can changed via $set_nperms() method.","code":"null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(delta = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$get_value(0)"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"null-specification","dir":"Articles","previous_headings":"","what":"Null specification","title":"A tour of permutation inference","text":"context null hypothesis testing, consider null hypothesis H0:μy−μx=δH_0: \\mu_y - \\mu_x = \\delta. can use permutation scheme approach pp-value two samples exchangeable H0H_0. means need transform example second sample make exchangeable first sample H0H_0. simple example, can achieved follows. Let X1,…,Xnx∼𝒩(μx,1)X_1, \\dots, X_{n_x} \\sim \\mathcal{N}(\\mu_x, 1) Y1,…,Yny∼𝒩(μy,1)Y_1, \\dots, Y_{n_y} \\sim \\mathcal{N}(\\mu_y, 1). can transform second sample Yi←Yi−δY_i \\longleftarrow Y_i - \\delta. can define proper function , termed null specification function, takes two input arguments: y list storing data points second sample; parameters numeric vector values parameters investigation (δ\\delta thus parameters length 11 parameters[1] = delta). simple example, boils :","code":"null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) }"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test statistics","title":"A tour of permutation inference","text":"Next, need decide test statistic(s) going use performing test. , interested one parameter, namely mean difference δ\\delta. Since two samples share variance, can use example tt-statistic pooled estimate common variance. statistic can easily computed using stats::t.test(x, y, var.equal = TRUE)$statistic. However, want extend evaluation permuted version data. Test statistic functions compatible flipr least two mandatory input arguments: data either concatenated list size nx+nyn_x + n_y regrouping data points samples distance matrix size (nx+ny)×(nx+ny)(n_x + n_y) \\times (n_x + n_y) stored object class dist. indices1 integer vector size nxn_x storing indices data points belonging first sample current permuted version data. flipr-compatible version t-statistic already implemented flipr ready use stat_student alias stat_t. , going use tt-statistic example, might willing use one statistic parameter might several parameters investigation, one requiring different test statistic. therefore group test statistics need single list:","code":"stat_functions <- list(stat_t)"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"statistic-assignments","dir":"Articles","previous_headings":"","what":"Statistic assignments","title":"A tour of permutation inference","text":"Finally need define named list tells flipr test statistics among ones declared stat_functions list used parameter investigation. used determine bounds parameter plausibility function. list, often termed stat_assignments, therefore many elements parameters investigation. element named parameter investigation list indices corresponding test statistics used parameter stat_functions. example, boils :","code":"stat_assignments <- list(delta = 1)"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"instantiation-of-the-plausibility-function","dir":"Articles","previous_headings":"","what":"Instantiation of the plausibility function","title":"A tour of permutation inference","text":"flipr, plausibility function implemented R6Class object. Assume observed two samples stored lists x y, therefore instantiate plausibility function data follows: Now, assume want test following hypotheses: H0:δ=0v.s.H1:δ≠0. H_0: \\delta = 0 \\quad \\mbox{v.s.} \\quad H_1: \\delta \\ne 0. use $get_value() method purpose, essentially evaluates permutation pp-value two-sided test default: possible evaluate one-sided p-values well changing $alternative field $set_alternative() method, accepts two_tail, left_tail right_tail values.` default, number sampled permutations 1000L. accessible $nperms field can changed via $set_nperms() method.","code":"pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$get_value(0)"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"application-to-the-toy-example","dir":"Articles","previous_headings":"","what":"Application to the toy example","title":"A tour of permutation inference","text":"Let us instantiate plausibility data simulated scenario : can compute point estimate mean difference store inside plausibility function class via $set_point_estimate() method: computed value can accessed via $point_estimate field: displaying list parameters investigation stored $parameters field. list, one can see parameters come unknown range default. can however compute bounds defining maximum confidence level $set_max_conf_level() method PlausibilityFunction class. plausibility function instantiated, default value $max_conf_level field 0.990.99. set parameter bounds automatically, use $set_parameter_bounds() method: can now inspect list parameters investigation see updated bounds: bounds known parameter, becomes possible generate grid later evaluating plausibility function. done $set_grid() method follows: can take look newly created grid: can go step evaluate plausibility function grid using $evaluate_grid() method follows: , can take look updated grid: can add grid p-value computed t-test assuming normality data:  However, keep mind parametric Student’s tt-test valid Gaussian data large samples invoking central limit theorem. sample sizes low samples drawn Gaussian distributions, permutation approach valid. samples come non-Gaussian data (Gamma-distributed samples) sample sizes low (1010 sample), get following pp-value functions (cutting 0.0010.001 since usual range useful pp-values 0.010.01 ):  parametric pp-value function clearly shifted decreasing part right plot. one samples come non-Gaussian data (second sample Gamma-distributed sample sizes low (1010 sample), get following pp-value functions (cutting 0.0010.001 since usual range useful pp-values 0.010.01 ):  situation seems less critical one sample non-Gaussian one simulation using Gamma-distributed second sample. bias important distributions. Another issue parametric approach limited type data one can use. parametric tt-test instance meant real-valued data. applicable multivariate data functional data topological data network-valued data type data representable real-valued data. motivates inference via permutation. Getting access pp-value function key making inference point estimation, confidence regions hypothesis tests come -product show next sections.","code":"pfa <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   a1, a2 ) pfa$set_nperms(B) pfa$set_point_estimate(mean(a2) - mean(a1)) pfa$point_estimate #>    delta  #> 3.264987 pfa$parameters #> $delta #> Delta (quantitative) #> Range: [?, ?] #> Point estimate: 3.26 pfa$set_parameter_bounds(   point_estimate = pfa$point_estimate,    conf_level = pfa$max_conf_level ) pfa$parameters #> $delta #> Delta (quantitative) #> Range: [2.02, 4.7] #> Point estimate: 3.26 pfa$set_grid(   parameters = pfa$parameters,    npoints = 50L ) pfa$grid #> # A tibble: 51 × 1 #>    delta #>    <dbl> #>  1  2.02 #>  2  2.07 #>  3  2.12 #>  4  2.17 #>  5  2.22 #>  6  2.27 #>  7  2.32 #>  8  2.37 #>  9  2.42 #> 10  2.47 #> # ℹ 41 more rows pfa$evaluate_grid(grid = pfa$grid) pfa$grid #> # A tibble: 51 × 2 #>    delta pvalue #>    <dbl>  <dbl> #>  1  2.02 0.0102 #>  2  2.07 0.0137 #>  3  2.12 0.0185 #>  4  2.17 0.0240 #>  5  2.22 0.0317 #>  6  2.27 0.0405 #>  7  2.32 0.0520 #>  8  2.37 0.0659 #>  9  2.42 0.0834 #> 10  2.47 0.104  #> # ℹ 41 more rows dfa <- pfa$grid %>%   mutate(     pvalue_alt = delta %>%       map_dbl(~ {         t.test(           x = a2,            y = a1,            alternative = \"two.sided\",            mu = .x,            var.equal = TRUE         )$p.value       })   ) %>%    select(     delta,      `Parametric Approach`  = pvalue_alt,      `Permutation Approach` = pvalue   ) %>%    pivot_longer(-delta) dfa %>%    filter(value > 1e-3) %>%    ggplot(aes(delta, value, color = name)) +    geom_line() +    geom_hline(     yintercept = 0.05,      color = \"black\",      linetype = \"dashed\"   ) +    labs(     title = \"Scenario A: P-value function for the mean difference\",      subtitle = \"Using Student's t-statistic and two-tailed p-values\",      x = expression(delta),      y = \"p-value\",      color = \"Type of test\"   ) +    theme_bw() +    theme(legend.position = \"top\") +    scale_y_log10() pfb <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   b1, b2 ) pfb$set_nperms(B) pfb$set_point_estimate(mean(b2) - mean(b1)) pfb$set_parameter_bounds(   point_estimate = pfb$point_estimate,    conf_level = pfb$max_conf_level ) pfb$set_grid(   parameters = pfb$parameters,    npoints = 50L ) pfb$evaluate_grid(grid = pfb$grid) dfb <- pfb$grid %>%   mutate(     pvalue_alt = delta %>%       map_dbl(~ {         t.test(           x = b2,            y = b1,            alternative = \"two.sided\",            mu = .x,            var.equal = TRUE         )$p.value       })   ) %>%    select(     delta,      `Parametric Approach`  = pvalue_alt,      `Permutation Approach` = pvalue   ) %>%    pivot_longer(-delta) dfb %>%    filter(value > 1e-3) %>%    ggplot(aes(delta, value, color = name)) +    geom_line() +    geom_hline(     yintercept = 0.05,      color = \"black\",      linetype = \"dashed\"   ) +    labs(     title = \"Scenario B: P-value function for the mean difference\",      subtitle = \"Using Student's t-statistic and two-tailed p-values\",      x = expression(delta),      y = \"p-value\",      color = \"Type of test\"   ) +    theme_bw() +    theme(legend.position = \"top\") +    scale_y_log10() pfc <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   c1, c2 ) pfc$set_nperms(B) pfc$set_point_estimate(mean(c2) - mean(c1)) pfc$set_parameter_bounds(   point_estimate = pfc$point_estimate,    conf_level = pfc$max_conf_level ) pfc$set_grid(   parameters = pfc$parameters,    npoints = 50L ) pfc$evaluate_grid(grid = pfc$grid) dfc <- pfc$grid %>%   mutate(     pvalue_alt = delta %>%       map_dbl(~ {         t.test(           x = c2,            y = c1,            alternative = \"two.sided\",            mu = .x,            var.equal = TRUE         )$p.value       })   ) %>%    select(     delta,      `Parametric Approach`  = pvalue_alt,      `Permutation Approach` = pvalue   ) %>%    pivot_longer(-delta) dfc %>%    filter(value > 1e-3) %>%    ggplot(aes(delta, value, color = name)) +    geom_line() +    geom_hline(     yintercept = 0.05,      color = \"black\",      linetype = \"dashed\"   ) +    labs(     title = \"Scenario C: P-value function for the mean difference\",      subtitle = \"Using Student's t-statistic and two-tailed p-values\",      x = expression(delta),      y = \"p-value\",      color = \"Type of test\"   ) +    theme_bw() +    theme(legend.position = \"top\") +    scale_y_log10()"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"scenario-a","dir":"Articles","previous_headings":"","what":"Scenario A","title":"A tour of permutation inference","text":"Let us instantiate plausibility data simulated scenario : can compute point estimate mean difference store inside plausibility function class via $set_point_estimate() method: computed value can accessed via $point_estimate field: displaying list parameters investigation stored $parameters field. list, one can see parameters come unknown range default. can however compute bounds defining maximum confidence level $set_max_conf_level() method PlausibilityFunction class. plausibility function instantiated, default value $max_conf_level field 0.990.99. set parameter bounds automatically, use $set_parameter_bounds() method: can now inspect list parameters investigation see updated bounds: bounds known parameter, becomes possible generate grid later evaluating plausibility function. done $set_grid() method follows: can take look newly created grid: can go step evaluate plausibility function grid using $evaluate_grid() method follows: , can take look updated grid: can add grid p-value computed t-test assuming normality data:","code":"pfa <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   a1, a2 ) pfa$set_nperms(B) pfa$set_point_estimate(mean(a2) - mean(a1)) pfa$point_estimate #>    delta  #> 3.264987 pfa$parameters #> $delta #> Delta (quantitative) #> Range: [?, ?] #> Point estimate: 3.26 pfa$set_parameter_bounds(   point_estimate = pfa$point_estimate,    conf_level = pfa$max_conf_level ) pfa$parameters #> $delta #> Delta (quantitative) #> Range: [2.02, 4.7] #> Point estimate: 3.26 pfa$set_grid(   parameters = pfa$parameters,    npoints = 50L ) pfa$grid #> # A tibble: 51 × 1 #>    delta #>    <dbl> #>  1  2.02 #>  2  2.07 #>  3  2.12 #>  4  2.17 #>  5  2.22 #>  6  2.27 #>  7  2.32 #>  8  2.37 #>  9  2.42 #> 10  2.47 #> # ℹ 41 more rows pfa$evaluate_grid(grid = pfa$grid) pfa$grid #> # A tibble: 51 × 2 #>    delta pvalue #>    <dbl>  <dbl> #>  1  2.02 0.0102 #>  2  2.07 0.0137 #>  3  2.12 0.0185 #>  4  2.17 0.0240 #>  5  2.22 0.0317 #>  6  2.27 0.0405 #>  7  2.32 0.0520 #>  8  2.37 0.0659 #>  9  2.42 0.0834 #> 10  2.47 0.104  #> # ℹ 41 more rows dfa <- pfa$grid %>%   mutate(     pvalue_alt = delta %>%       map_dbl(~ {         t.test(           x = a2,            y = a1,            alternative = \"two.sided\",            mu = .x,            var.equal = TRUE         )$p.value       })   ) %>%    select(     delta,      `Parametric Approach`  = pvalue_alt,      `Permutation Approach` = pvalue   ) %>%    pivot_longer(-delta) dfa %>%    filter(value > 1e-3) %>%    ggplot(aes(delta, value, color = name)) +    geom_line() +    geom_hline(     yintercept = 0.05,      color = \"black\",      linetype = \"dashed\"   ) +    labs(     title = \"Scenario A: P-value function for the mean difference\",      subtitle = \"Using Student's t-statistic and two-tailed p-values\",      x = expression(delta),      y = \"p-value\",      color = \"Type of test\"   ) +    theme_bw() +    theme(legend.position = \"top\") +    scale_y_log10()"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"scenario-b","dir":"Articles","previous_headings":"","what":"Scenario B","title":"A tour of permutation inference","text":"However, keep mind parametric Student’s tt-test valid Gaussian data large samples invoking central limit theorem. sample sizes low samples drawn Gaussian distributions, permutation approach valid. samples come non-Gaussian data (Gamma-distributed samples) sample sizes low (1010 sample), get following pp-value functions (cutting 0.0010.001 since usual range useful pp-values 0.010.01 ):  parametric pp-value function clearly shifted decreasing part right plot.","code":"pfb <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   b1, b2 ) pfb$set_nperms(B) pfb$set_point_estimate(mean(b2) - mean(b1)) pfb$set_parameter_bounds(   point_estimate = pfb$point_estimate,    conf_level = pfb$max_conf_level ) pfb$set_grid(   parameters = pfb$parameters,    npoints = 50L ) pfb$evaluate_grid(grid = pfb$grid) dfb <- pfb$grid %>%   mutate(     pvalue_alt = delta %>%       map_dbl(~ {         t.test(           x = b2,            y = b1,            alternative = \"two.sided\",            mu = .x,            var.equal = TRUE         )$p.value       })   ) %>%    select(     delta,      `Parametric Approach`  = pvalue_alt,      `Permutation Approach` = pvalue   ) %>%    pivot_longer(-delta) dfb %>%    filter(value > 1e-3) %>%    ggplot(aes(delta, value, color = name)) +    geom_line() +    geom_hline(     yintercept = 0.05,      color = \"black\",      linetype = \"dashed\"   ) +    labs(     title = \"Scenario B: P-value function for the mean difference\",      subtitle = \"Using Student's t-statistic and two-tailed p-values\",      x = expression(delta),      y = \"p-value\",      color = \"Type of test\"   ) +    theme_bw() +    theme(legend.position = \"top\") +    scale_y_log10()"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"scenario-c","dir":"Articles","previous_headings":"","what":"Scenario C","title":"A tour of permutation inference","text":"one samples come non-Gaussian data (second sample Gamma-distributed sample sizes low (1010 sample), get following pp-value functions (cutting 0.0010.001 since usual range useful pp-values 0.010.01 ):  situation seems less critical one sample non-Gaussian one simulation using Gamma-distributed second sample. bias important distributions. Another issue parametric approach limited type data one can use. parametric tt-test instance meant real-valued data. applicable multivariate data functional data topological data network-valued data type data representable real-valued data. motivates inference via permutation. Getting access pp-value function key making inference point estimation, confidence regions hypothesis tests come -product show next sections.","code":"pfc <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   c1, c2 ) pfc$set_nperms(B) pfc$set_point_estimate(mean(c2) - mean(c1)) pfc$set_parameter_bounds(   point_estimate = pfc$point_estimate,    conf_level = pfc$max_conf_level ) pfc$set_grid(   parameters = pfc$parameters,    npoints = 50L ) pfc$evaluate_grid(grid = pfc$grid) dfc <- pfc$grid %>%   mutate(     pvalue_alt = delta %>%       map_dbl(~ {         t.test(           x = c2,            y = c1,            alternative = \"two.sided\",            mu = .x,            var.equal = TRUE         )$p.value       })   ) %>%    select(     delta,      `Parametric Approach`  = pvalue_alt,      `Permutation Approach` = pvalue   ) %>%    pivot_longer(-delta) dfc %>%    filter(value > 1e-3) %>%    ggplot(aes(delta, value, color = name)) +    geom_line() +    geom_hline(     yintercept = 0.05,      color = \"black\",      linetype = \"dashed\"   ) +    labs(     title = \"Scenario C: P-value function for the mean difference\",      subtitle = \"Using Student's t-statistic and two-tailed p-values\",      x = expression(delta),      y = \"p-value\",      color = \"Type of test\"   ) +    theme_bw() +    theme(legend.position = \"top\") +    scale_y_log10()"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"inferential-tasks-via-the-plausibility-function","dir":"Articles","previous_headings":"","what":"Inferential tasks via the plausibility function","title":"A tour of permutation inference","text":"One can obtain point estimate parameter investigation searching value parameter reaches maximum pp-value function (11). One can use $set_point_estimate() method : computed point estimate stored $point_estimate field can retrieved : One can obtain confidence interval parameter investigation searching values parameter pp-value function remains pre-specified significance level α\\alpha. achieved via $set_parameter_bounds() method: Extracting pp-value single hypothesis test null hypothesis H0:δ=δ0H_0: \\delta = \\delta_0 immediate pp-value function boils evaluating pp-value function δ0\\delta_0. Hence can instance test H0:δ=3H_0: \\delta = 3 alternative H1:δ≠3H_1: \\delta \\ne 3 using following piece code:","code":"pfa$set_point_estimate(overwrite = TRUE) pfa$point_estimate #>    delta  #> 3.264987 pfa$set_parameter_bounds(   point_estimate = pfa$point_estimate,    conf_level = 0.95 ) pfa$parameters #> $delta #> Delta (quantitative) #> Range: [2.02, 4.7] #> Point estimate: 3.26 pfa$set_nperms(1000) pfa$get_value(3) #> [1] 0.5714259"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"point-estimation","dir":"Articles","previous_headings":"","what":"Point estimation","title":"A tour of permutation inference","text":"One can obtain point estimate parameter investigation searching value parameter reaches maximum pp-value function (11). One can use $set_point_estimate() method : computed point estimate stored $point_estimate field can retrieved :","code":"pfa$set_point_estimate(overwrite = TRUE) pfa$point_estimate #>    delta  #> 3.264987"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"confidence-intervals","dir":"Articles","previous_headings":"","what":"Confidence intervals","title":"A tour of permutation inference","text":"One can obtain confidence interval parameter investigation searching values parameter pp-value function remains pre-specified significance level α\\alpha. achieved via $set_parameter_bounds() method:","code":"pfa$set_parameter_bounds(   point_estimate = pfa$point_estimate,    conf_level = 0.95 ) pfa$parameters #> $delta #> Delta (quantitative) #> Range: [2.02, 4.7] #> Point estimate: 3.26"},{"path":"https://permaverse.github.io/flipr/articles/flipr.html","id":"hypothesis-tests","dir":"Articles","previous_headings":"","what":"Hypothesis tests","title":"A tour of permutation inference","text":"Extracting pp-value single hypothesis test null hypothesis H0:δ=δ0H_0: \\delta = \\delta_0 immediate pp-value function boils evaluating pp-value function δ0\\delta_0. Hence can instance test H0:δ=3H_0: \\delta = 3 alternative H1:δ≠3H_1: \\delta \\ne 3 using following piece code:","code":"pfa$set_nperms(1000) pfa$get_value(3) #> [1] 0.5714259"},{"path":[]},{"path":"https://permaverse.github.io/flipr/articles/parallelization.html","id":"computation-without-parallel-processing","dir":"Articles","previous_headings":"","what":"Computation without parallel processing","title":"Parallel processing","text":"show benefit parallel processing, compare processing times necessary compute point estimation evaluate grid plausibility function. First, computation without parallelization.","code":"set.seed(1234) x <- rnorm(10, 1, 1) y <- rnorm(10, 4, 1)  null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(delta = 1)  pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$set_nperms(2000)  tic() pf$set_point_estimate() time_without_parallel <- toc()$callback_msg time_without_parallel #> [1] \"135.323 sec elapsed\" pf$set_parameter_bounds(   point_estimate = pf$point_estimate,    conf_level = pf$max_conf_level ) pf$set_grid(   parameters = pf$parameters,    npoints = 100L )  tictoc::tic() pf$evaluate_grid(grid = pf$grid) time_without_future <- tictoc::toc()$callback_msg time_without_future #> [1] \"42.511 sec elapsed\""},{"path":"https://permaverse.github.io/flipr/articles/parallelization.html","id":"computation-with-parallel-processing","dir":"Articles","previous_headings":"","what":"Computation with parallel processing","title":"Parallel processing","text":"setting desired number cores, define number background R sessions used evaluate expressions parallel. number used set multisession plan function future::plan() define default cluster parallel::setDefaultCluster(). , enable visualization evaluation progress, can put code progressr::with_progress() function, simply set following code progressr::handlers() function. settings, flipr functions can used, shown example. good practice shut workers parallel::stopCluster() function end code. experiment proves can save lot computation time using parallel processing. Indeed, setting 3 cores parallel processing tools, reduced approximately 3 times computation time computing point estimation evaluating plausibility function. Finally, return sequential plan progress updates, following code can used. also allows shut workers used future.","code":"ncores <- 3 future::plan(future::multisession, workers = ncores) cl <- parallel::makeCluster(ncores) parallel::setDefaultCluster(cl) progressr::handlers(global = TRUE)  set.seed(1234) x <- rnorm(10, 1, 1) y <- rnorm(10, 4, 1)  null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(delta = 1)  pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$set_nperms(2000)  tic() pf$set_point_estimate() time_with_parallel <- toc()$callback_msg time_with_parallel #> [1] \"47.882 sec elapsed\" pf$set_parameter_bounds(   point_estimate = pf$point_estimate,    conf_level = pf$max_conf_level ) pf$set_grid(   parameters = pf$parameters,    npoints = 100L )  tictoc::tic() pf$evaluate_grid(grid = pf$grid) time_with_future <- tictoc::toc()$callback_msg  parallel::stopCluster(cl) time_with_future #> [1] \"14.463 sec elapsed\" future::plan(future::sequential) parallel::setDefaultCluster(NULL) progressr::handlers(global = FALSE)"},{"path":"https://permaverse.github.io/flipr/articles/plausibility.html","id":"plausibility-function-for-the-mean","dir":"Articles","previous_headings":"","what":"Plausibility function for the mean","title":"Computing plausibility functions","text":"","code":"null_spec <- function(y, parameters) {   map(y, ~ .x - parameters) } stat_functions <- list(stat_t) stat_assignments <- list(delta = 1)  pf <- PlausibilityFunction$new(   null_spec = null_spec,    stat_functions = stat_functions,    stat_assignments = stat_assignments,    x1, x2,     seed = 1234 ) pf$set_nperms(nperms) pf$set_point_estimate(mean(x2) - mean(x1)) pf$set_parameter_bounds(   point_estimate = pf$point_estimate,    conf_level = pf$max_conf_level ) pf$set_grid(   parameters = pf$parameters,    npoints = ngrid_in )  pf$set_alternative(\"two_tail\") pf$evaluate_grid(grid = pf$grid) df <- rename(pf$grid, two_tail = pvalue)  pf$set_alternative(\"left_tail\") pf$grid$pvalue <- NULL pf$evaluate_grid(grid = pf$grid) df <- bind_rows(   df,    rename(pf$grid, left_tail = pvalue) )  pf$set_alternative(\"right_tail\") pf$grid$pvalue <- NULL pf$evaluate_grid(grid = pf$grid) df <- bind_rows(   df,    rename(pf$grid, right_tail = pvalue) )  pf$set_grid(   parameters = pf$parameters,    npoints = ngrid_out )  df_mean <- tibble(   delta = pf$grid$delta,    two_tail = approx(df$delta, df$two_tail, delta)$y,    left_tail = approx(df$delta, df$left_tail, delta)$y,    right_tail = approx(df$delta, df$right_tail, delta)$y,  ) %>%   pivot_longer(-delta) df_mean %>%   ggplot(aes(delta, value, color = name)) +   geom_line() +   labs(     title = \"P-value function for the mean\",      subtitle = \"t-statistic\",      x = expression(delta),      y = \"p-value\",      color = \"Type\"   ) +   geom_hline(     yintercept = 0.05,     color = \"black\",     linetype = \"dashed\"   ) +   geom_vline(     xintercept = mean(x2) - mean(x1),     color = \"black\"   ) +   geom_vline(     xintercept = stats::t.test(x2, x1, var.equal = TRUE)$conf.int,     color = \"black\",     linetype = \"dashed\"   ) +   scale_y_continuous(breaks = seq(0, 1, by = 0.05), limits = c(0, 1))"},{"path":"https://permaverse.github.io/flipr/articles/plausibility.html","id":"plausibility-function-for-the-variance","dir":"Articles","previous_headings":"","what":"Plausibility function for the variance","title":"Computing plausibility functions","text":"","code":"null_spec <- function(y, parameters) {   map(y, ~ .x / parameters) } stat_functions <- list(stat_f) stat_assignments <- list(rho = 1)  pf <- PlausibilityFunction$new(   null_spec = null_spec,    stat_functions = stat_functions,    stat_assignments = stat_assignments,    y1, y2,     seed = 1234 ) pf$set_nperms(nperms) pf$set_point_estimate(sd(y2) / sd(y1)) pf$set_parameter_bounds(   point_estimate = pf$point_estimate,    conf_level = pf$max_conf_level ) pf$set_grid(   parameters = pf$parameters,    npoints = ngrid_in )  pf$set_alternative(\"two_tail\") pf$evaluate_grid(grid = pf$grid) df <- rename(pf$grid, two_tail = pvalue)  pf$set_alternative(\"left_tail\") pf$grid$pvalue <- NULL pf$evaluate_grid(grid = pf$grid) df <- bind_rows(   df,    rename(pf$grid, left_tail = pvalue) )  pf$set_alternative(\"right_tail\") pf$grid$pvalue <- NULL pf$evaluate_grid(grid = pf$grid) df <- bind_rows(   df,    rename(pf$grid, right_tail = pvalue) )  pf$set_grid(   parameters = pf$parameters,    npoints = ngrid_out )  df_sd <- tibble(   rho = pf$grid$rho,    two_tail = approx(df$rho, df$two_tail, rho)$y,    left_tail = approx(df$rho, df$left_tail, rho)$y,    right_tail = approx(df$rho, df$right_tail, rho)$y,  ) %>%   pivot_longer(-rho) df_sd %>%   ggplot(aes(rho, value, color = name)) +   geom_line() +   labs(     title = \"P-value function for the standard deviation\",      subtitle = \"F-statistic\",      x = expression(rho),      y = \"p-value\",      color = \"Type\"   ) +   geom_hline(     yintercept = 0.05,     color = \"black\",     linetype = \"dashed\"   ) +   geom_vline(     xintercept = sqrt(stats::var.test(y2, y1)$statistic),     color = \"black\"   ) +   geom_vline(     xintercept = sqrt(stats::var.test(y2, y1)$conf.int),     color = \"black\",     linetype = \"dashed\"   ) +   scale_y_continuous(breaks = seq(0, 1, by = 0.05), limits = c(0, 1))"},{"path":"https://permaverse.github.io/flipr/articles/plausibility.html","id":"plausibility-function-for-both-mean-and-variance","dir":"Articles","previous_headings":"","what":"Plausibility function for both mean and variance","title":"Computing plausibility functions","text":"Assume two r.v. XX YY differ distribution first two moments. Let μX\\mu_X μY\\mu_Y means XX YY respectively σX\\sigma_X σY\\sigma_Y standard deviations. can therefore write Y=δ+ρX. Y = \\delta + \\rho X. case, {μY=δ+ρμXσY2=ρ2σX2⇔{δ=μY−σYσXμXρ=σYσX \\begin{cases} \\mu_Y = \\delta + \\rho \\mu_X \\\\ \\sigma_Y^2 = \\rho^2 \\sigma_X^2 \\end{cases} \\Longleftrightarrow \\begin{cases} \\delta = \\mu_Y - \\frac{\\sigma_Y}{\\sigma_X} \\mu_X \\\\ \\rho = \\frac{\\sigma_Y}{\\sigma_X} \\end{cases} following example, δ=3\\delta = 3 ρ=2\\rho = 2.","code":"null_spec <- function(y, parameters) {   map(y, ~ (.x - parameters[1]) / parameters[2]) } stat_functions <- list(stat_t, stat_f) stat_assignments <- list(delta = 1, rho = 2)  pf <- PlausibilityFunction$new(   null_spec = null_spec,    stat_functions = stat_functions,    stat_assignments = stat_assignments,    z1, z2,     seed = 1234 ) pf$set_nperms(nperms) pf$set_point_estimate(c(   mean(z2) - sd(z2) / sd(z1) * mean(z1),    sd(z2) / sd(z1) )) pf$set_parameter_bounds(   point_estimate = pf$point_estimate,    conf_level = pf$max_conf_level )  # Fisher combining function pf$set_aggregator(\"fisher\") pf$set_grid(   parameters = pf$parameters,    npoints = ngrid_in ) pf$evaluate_grid(grid = pf$grid) grid_in <- pf$grid pf$set_grid(   parameters = pf$parameters,    npoints = ngrid_out ) if (requireNamespace(\"interp\", quietly = TRUE)) {   Zout <- interp::interp(     x = grid_in$delta,     y = grid_in$log_rho,     z = grid_in$pvalue,     xo = sort(unique(pf$grid$delta)),     yo = sort(unique(pf$grid$log_rho))   )   pf$grid$pvalue <- as.numeric(Zout$z) } else   pf$grid$pvalue <- rep(NA, nrow(pf$grid))  df_fisher <- pf$grid  # Tippett combining function pf$set_aggregator(\"tippett\") pf$set_grid(   parameters = pf$parameters,    npoints = ngrid_in ) pf$evaluate_grid(grid = pf$grid) grid_in <- pf$grid pf$set_grid(   parameters = pf$parameters,    npoints = ngrid_out ) if (requireNamespace(\"interp\", quietly = TRUE)) {   Zout <- interp::interp(     x = grid_in$delta,     y = grid_in$log_rho,     z = grid_in$pvalue,     xo = sort(unique(pf$grid$delta)),     yo = sort(unique(pf$grid$log_rho))   )   pf$grid$pvalue <- as.numeric(Zout$z) } else   pf$grid$pvalue <- rep(NA, nrow(pf$grid))  df_tippett <- pf$grid df_fisher %>%    ggplot(aes(delta, log_rho, z = pvalue)) +    geom_contour_filled(binwidth = 0.05) +    labs(     title = \"Contour plot of the p-value surface\",      subtitle = \"Using Fisher's non-parametric combination\",      x = expression(delta),      y = expression(log(rho)),      fill = \"p-value\"   ) +    theme_minimal() df_tippett %>%    ggplot(aes(delta, log_rho, z = pvalue)) +    geom_contour_filled(binwidth = 0.05) +    labs(     title = \"Contour plot of the p-value surface\",      subtitle = \"Using Tippett's non-parametric combination\",      x = expression(delta),      y = expression(log(rho)),      fill = \"p-value\"   ) +    theme_minimal()"},{"path":[]},{"path":"https://permaverse.github.io/flipr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alessia Pini. Author. Aymeric Stamm. Author, maintainer. Simone Vantini. Author. Juliette Chiapello. Contributor. Manon Simonot. Contributor.","code":""},{"path":"https://permaverse.github.io/flipr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pini , Stamm , Vantini S (2025). flipr: Flexible Inference via Permutations R. R package version 0.3.3.9000, https://github.com/permaverse/flipr/, https://permaverse.github.io/flipr/.","code":"@Manual{,   title = {flipr: Flexible Inference via Permutations in R},   author = {Alessia Pini and Aymeric Stamm and Simone Vantini},   year = {2025},   note = {R package version 0.3.3.9000, https://github.com/permaverse/flipr/},   url = {https://permaverse.github.io/flipr/}, }"},{"path":"https://permaverse.github.io/flipr/index.html","id":"overview-","dir":"","previous_headings":"","what":"Flexible Inference via Permutations in R","title":"Flexible Inference via Permutations in R","text":"goal flipr package provide flexible framework making inference via permutation. idea promote permutation framework incredibly well-suited tool inference complex data. supply data, complex might , form lists entry stores one data point representation suits flipr takes care permutation magic provides either point estimates confidence regions pp-value hypothesis tests. Permutation tests especially appealing exact matter small big sample sizes . can also use -called non-parametric combination approach setting combine several statistics better target alternative hypothesis testing . Asymptotic consistency also guaranteed mild conditions statistic use. flipr package provides flexible permutation framework making inference point estimation, confidence intervals hypothesis testing, kind data, univariate, multivariate, complex network-valued data, topological data, functional data density-valued data.","code":""},{"path":"https://permaverse.github.io/flipr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Flexible Inference via Permutations in R","text":"can install package CRAN : Alternatively, can install development version flipr GitHub :","code":"install.packages(\"flipr\") # install.packages(\"pak\") pak::pak(\"permaverse/flipr\")"},{"path":"https://permaverse.github.io/flipr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Flexible Inference via Permutations in R","text":"hereby use simple t-test comparing means two univariate samples show easy carry permutation test flipr.","code":"library(flipr)"},{"path":"https://permaverse.github.io/flipr/index.html","id":"data-generation","dir":"","previous_headings":"Example","what":"Data generation","title":"Flexible Inference via Permutations in R","text":"Let us first generate two samples size 1515 governed Gaussian distributions equal variance different means: Given data simulated, parameter interest difference means distributions, say δ=μy−μx\\delta = \\mu_y - \\mu_x.","code":"set.seed(123) n <- 15 x <- rnorm(n = n, mean = 0, sd = 1) y <- rnorm(n = n, mean = 1, sd = 1)"},{"path":"https://permaverse.github.io/flipr/index.html","id":"make-the-two-samples-exchangeable-under-h_0","dir":"","previous_headings":"Example","what":"Make the two samples exchangeable under H0H_0","title":"Flexible Inference via Permutations in R","text":"context null hypothesis testing, consider null hypothesis H0:μy−μx=δH_0: \\mu_y - \\mu_x = \\delta. can use permutation scheme approach pp-value two samples exchangeable H0H_0. means need transform example second sample make exchangeable first sample H0H_0. simple example, can achieved follows. Let X1,…,Xnx∼𝒩(μx,1)X_1, \\dots, X_{n_x} \\sim \\mathcal{N}(\\mu_x, 1) Y1,…,Yny∼𝒩(μy,1)Y_1, \\dots, Y_{n_y} \\sim \\mathcal{N}(\\mu_y, 1). can transform second sample Yi←Yi−δY_i \\longleftarrow Y_i - \\delta. can define proper function , termed null specification function, takes two input arguments: y list storing data points second sample; parameters numeric vector values parameters investigation (δ\\delta thus parameters length 11 parameters[1] = delta). simple example, boils :","code":"null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) }"},{"path":"https://permaverse.github.io/flipr/index.html","id":"choose-suitable-test-statistics","dir":"","previous_headings":"Example","what":"Choose suitable test statistics","title":"Flexible Inference via Permutations in R","text":"Next, need decide test statistic(s) going use performing test. , interested one parameter, namely mean difference δ\\delta. Since two samples share variance, can use example tt-statistic pooled estimate common variance. statistic can easily computed using stats::t.test(x, y, var.equal = TRUE)$statistic. However, want extend evaluation permuted version data. Test statistic functions compatible flipr least two mandatory input arguments: data either concatenated list size nx+nyn_x + n_y regrouping data points samples distance matrix size (nx+ny)×(nx+ny)(n_x + n_y) \\times (n_x + n_y) stored object class dist. indices1 integer vector size nxn_x storing indices data points belonging first sample current permuted version data. test statistics already implemented flipr ready use. User-defined test statistics can used well, use helper function use_stat(nsamples = 2, stat_name = ). function creates saves .R file R/ folder current working directory populates following template: instance, flipr-compatible version tt-statistic pooled variance look like: , going use tt-statistic example, might willing use one statistic parameter might several parameters investigation, one requiring different test statistic. therefore group test statistics need single list:","code":"#' Test Statistic for the Two-Sample Problem #' #' This function computes the test statistic... #' #' @param data A list storing the concatenation of the two samples from which #'   the user wants to make inference. Alternatively, a distance matrix stored #'   in an object of class \\code{\\link[stats]{dist}} of pairwise distances #'   between data points. #' @param indices1 An integer vector that contains the indices of the data #'   points belong to the first sample in the current permuted version of the #'   data. #' #' @return A numeric value evaluating the desired test statistic. #' @export #' #' @examples #' # TO BE DONE BY THE DEVELOPER OF THE PACKAGE stat_{{{name}}} <- function(data, indices1) {   n <- if (inherits(data, \"dist\"))     attr(data, \"Size\")   else if (inherits(data, \"list\"))     length(data)   else     stop(\"The `data` input should be of class either list or dist.\")    indices2 <- seq_len(n)[-indices1]    x <- data[indices1]   y <- data[indices2]    # Here comes the code that computes the desired test   # statistic from input samples stored in lists x and y  } my_t_stat <- function(data, indices1) {   n <- if (inherits(data, \"dist\"))     attr(data, \"Size\")   else if (inherits(data, \"list\"))     length(data)   else     stop(\"The `data` input should be of class either list or dist.\")    indices2 <- seq_len(n)[-indices1]    x <- data[indices1]   y <- data[indices2]      # Here comes the code that computes the desired test   # statistic from input samples stored in lists x and y   x <- unlist(x)   y <- unlist(y)      stats::t.test(x, y, var.equal = TRUE)$statistic } stat_functions <- list(my_t_stat)"},{"path":"https://permaverse.github.io/flipr/index.html","id":"assign-test-statistics-to-parameters","dir":"","previous_headings":"Example","what":"Assign test statistics to parameters","title":"Flexible Inference via Permutations in R","text":"Finally need define named list tells flipr test statistics among ones declared stat_functions list used parameter investigation. used determine bounds parameter plausibility function. list, often termed stat_assignments, therefore many elements parameters investigation. element named parameter investigation list indices corresponding test statistics used parameter stat_functions. example, boils :","code":"stat_assignments <- list(delta = 1)"},{"path":"https://permaverse.github.io/flipr/index.html","id":"use-the-plausibility-function","dir":"","previous_headings":"Example","what":"Use the plausibility function","title":"Flexible Inference via Permutations in R","text":"Now can instantiate plausibility function follows: Now, assume want test following hypotheses: H0:δ=0v.s.H1:δ≠0. H_0: \\delta = 0 \\quad \\mbox{v.s.} \\quad H_1: \\delta \\ne 0. use $get_value() method purpose, essentially evaluates permutation pp-value two-sided test default: can compare resulting pp-value one obtained using classic parametric test: permutation pp-value quite match parametric one. two reasons: resolution permutation pp-value order 1/(B+1)1/(B+1), BB number sampled permutations. default, plausibility function instantiated B=1000B = 1000: randomly sample BB permutations (nx+nynx)\\binom{n_x+n_y}{n_x} possible permutations therefore introduce extra variability pp-value. ask permutations, say B=1,000,000B = 1,000,000, much closer parametric pp-value:","code":"pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$get_value(0) #> [1] 0.1078921 t.test(x, y, var.equal = TRUE)$p.value #> [1] 0.1030946 pf$nperms #> [1] 1000 pf$set_nperms(1000000) pf$get_value(0) #> [1] 0.1029879"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class representing a plausibility function — PlausibilityFunction","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"plausibility function ...","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"nparams integer specifying number parameters inferred. Default 1L. nperms integer specifying number permutations sampled. Default 1000L. nperms_max integer specifying total number distinct permutations can made given sample sizes. alternative string specifying type alternative hypothesis. Choices \"two_tail\", \"left_tail\" \"right_tail. Defaults \"two_tail\". aggregator string specifying function used aggregate test statistic values non-parametric combination used (.e. multiple test statistics used). Choices \"tippett\" \"fisher now. Defaults \"tippett\". pvalue_formula string specifying formula use computing permutation p-value. Choices either exact (default), upper_bound estimate. former provides p-values lead exact hypothesis tests latter provides unbiased estimate traditional p-value. max_conf_level numeric value specifying maximum confidence level aim achieve confidence regions. used compute bounds parameter interest order fit Kriging model approximates expensive plausibility function hypercube. Defaults 0.99. point_estimate numeric vector providing point estimates parameters interest. parameters list functions class param produced via new_quant_param stores parameters inferred along important properties name, range, etc. Defaults NULL. grid tibble storing evaluations plausibility function regular centered grid parameter space. Defaults NULL. seed numeric value specifying seed used. Defaults 1234.","code":""},{"path":[]},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"PlausibilityFunction$new() PlausibilityFunction$set_nperms() PlausibilityFunction$set_nperms_max() PlausibilityFunction$set_alternative() PlausibilityFunction$set_aggregator() PlausibilityFunction$set_pvalue_formula() PlausibilityFunction$get_value() PlausibilityFunction$set_max_conf_level() PlausibilityFunction$set_point_estimate() PlausibilityFunction$set_parameter_bounds() PlausibilityFunction$set_grid() PlausibilityFunction$evaluate_grid() PlausibilityFunction$clone()","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Create new plausibility function object.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$new(   null_spec,   stat_functions,   stat_assignments,   ...,   seed = NULL )"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"null_spec function R object coercible function (via rlang::as_function()). one-sample problems, transform x sample (provided first argument) using parameters (second argument) make distribution centered symmetric. two-sample problems, transform y sample (provided first argument) using parameters (second argument) make exchangeable x sample null hypothesis. stat_functions vector list functions (R objects coercible functions via rlang::as_function()) specifying whole set test statistics used. stat_assignments named list integer vectors specifying test statistic associated parameter. length list match number parameters investigation thus used set . element list named parameter identifies. ... Vectors, matrices lists providing observed samples. seed numeric value specifying seed used. Defaults NULL case seed = 1234 used user informed setting.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"new PlausibilityFunction object.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-nperms-","dir":"Reference","previous_headings":"","what":"Method set_nperms()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Change value nperms field.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_nperms(val)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"val New value number permutations sampled.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$nperms pf$set_nperms(10000) pf$nperms"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-nperms-max-","dir":"Reference","previous_headings":"","what":"Method set_nperms_max()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Change value nperms_max field.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_nperms_max(val)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"val New value total number possible distinct permutations.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$nperms_max pf$set_nperms_max(10000) pf$nperms_max"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-alternative-","dir":"Reference","previous_headings":"","what":"Method set_alternative()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Change value alternative field.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_alternative(val)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"val New value type alternative hypothesis.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$alternative pf$set_alternative(\"right_tail\") pf$alternative"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-aggregator-","dir":"Reference","previous_headings":"","what":"Method set_aggregator()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Change value aggregator field.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_aggregator(val)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"val New value string specifying function used aggregate test statistic values non-parametric combination used (.e. multiple test statistics used).","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$aggregator pf$set_aggregator(\"fisher\") pf$aggregator"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-pvalue-formula-","dir":"Reference","previous_headings":"","what":"Method set_pvalue_formula()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Change value pvalue_formula field.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_pvalue_formula(val)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"val New value string specifying formula used compute permutation p-value.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$pvalue_formula pf$set_pvalue_formula(\"estimate\") pf$pvalue_formula"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-get-value-","dir":"Reference","previous_headings":"","what":"Method get_value()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Computes indicator plausibility specific values parameters interest form p-value hypothesis test values.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$get_value(   parameters,   keep_null_distribution = FALSE,   keep_permutations = FALSE,   ... )"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"parameters vector whose length match nparams field providing specific values parameters interest assessment plausibility form p-value corresponding hypothesis test. keep_null_distribution boolean specifying whether empirical permutation null distribution returned well. Defaults FALSE. keep_permutations boolean specifying whether list sampled permutations used compute empirical permutation null distribution returned well. Defaults FALSE. ... Extra parameters specific statistics.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$set_nperms(50) pf$get_value(2)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-max-conf-level-","dir":"Reference","previous_headings":"","what":"Method set_max_conf_level()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Change value max_conf_level field.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_max_conf_level(val)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"val New value maximum confidence level aim achieve confidence regions.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$max_conf_level pf$set_max_conf_level(0.999) pf$max_conf_level"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-point-estimate-","dir":"Reference","previous_headings":"","what":"Method set_point_estimate()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Change value point_estimate field.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_point_estimate(   point_estimate = NULL,   lower_bound = -10,   upper_bound = 10,   estimate = FALSE,   overwrite = FALSE )"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"point_estimate numeric vector providing rough point estimates parameters investigation. lower_bound scalar numeric vector specifying lower bounds parameter investigation. scalar, value used lower bound parameters. Defaults -10. upper_bound scalar numeric vector specifying lower bounds parameter investigation. scalar, value used lower bound parameters. Defaults 10. estimate boolean specifying whether rough point estimate provided val serve initial point maximizing plausibility function (estimate = TRUE) final point estimate parameters (estimate = FALSE). Defaults FALSE. overwrite boolean specifying whether force computation already set. Defaults FALSE.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$point_estimate pf$set_point_estimate(mean(y) - mean(x)) pf$point_estimate"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-parameter-bounds-","dir":"Reference","previous_headings":"","what":"Method set_parameter_bounds()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Change value parameters field. Updates range parameters investigation.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_parameter_bounds(point_estimate, conf_level)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"point_estimate numeric vector providing point estimate parameter investigation. estimator known user, (s)can resort $set_point_estimate() method get point estimate maximizing plausibility function. conf_level numeric value specifying confidence level used setting parameter bounds. (0,1).","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$set_nperms(50) pf$set_point_estimate(point_estimate = mean(y) - mean(x)) pf$parameters pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = 0.8 ) pf$parameters"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-set-grid-","dir":"Reference","previous_headings":"","what":"Method set_grid()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Computes tibble storing regular centered grid parameter space.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$set_grid(parameters, npoints = 20L)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"parameters list new_quant_param objects containing information parameters investigation. contain fields point_estimate range. npoints integer specifying number points discretize dimension. Defaults 20L.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$set_nperms(50) pf$set_point_estimate(mean(y) - mean(x)) pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = 0.8 ) pf$set_grid(   parameters = pf$parameters,   npoints = 2L )"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-evaluate-grid-","dir":"Reference","previous_headings":"","what":"Method evaluate_grid()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"Updates grid field pvalue column storing evaluations plausibility function regular centered grid parameter space.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$evaluate_grid(grid)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"grid tibble storing grid spans space parameters investigation.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) pf$set_nperms(50) pf$set_point_estimate(mean(y) - mean(x)) pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = 0.8 ) pf$set_grid(   parameters = pf$parameters,   npoints = 2L ) pf$evaluate_grid(grid = pf$grid)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"objects class cloneable method.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"PlausibilityFunction$clone(deep = FALSE)"},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"deep Whether make deep clone.","code":""},{"path":"https://permaverse.github.io/flipr/reference/PlausibilityFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class representing a plausibility function — PlausibilityFunction","text":"","code":"## ------------------------------------------------ ## Method `PlausibilityFunction$set_nperms` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$nperms #> [1] 1000 pf$set_nperms(10000) pf$nperms #> [1] 10000  ## ------------------------------------------------ ## Method `PlausibilityFunction$set_nperms_max` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$nperms_max #> NULL pf$set_nperms_max(10000) pf$nperms_max #> [1] 10000  ## ------------------------------------------------ ## Method `PlausibilityFunction$set_alternative` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$alternative #> [1] \"two_tail\" pf$set_alternative(\"right_tail\") pf$alternative #> [1] \"right_tail\"  ## ------------------------------------------------ ## Method `PlausibilityFunction$set_aggregator` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$aggregator #> [1] \"tippett\" pf$set_aggregator(\"fisher\") pf$aggregator #> [1] \"fisher\"  ## ------------------------------------------------ ## Method `PlausibilityFunction$set_pvalue_formula` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$pvalue_formula #> [1] \"exact\" pf$set_pvalue_formula(\"estimate\") pf$pvalue_formula #> [1] \"estimate\"  ## ------------------------------------------------ ## Method `PlausibilityFunction$get_value` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$set_nperms(50) pf$get_value(2) #> [1] 0.2352914  ## ------------------------------------------------ ## Method `PlausibilityFunction$set_max_conf_level` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$max_conf_level #> [1] 0.99 pf$set_max_conf_level(0.999) pf$max_conf_level #> [1] 0.999  ## ------------------------------------------------ ## Method `PlausibilityFunction$set_point_estimate` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$point_estimate #> mean  #>   NA  pf$set_point_estimate(mean(y) - mean(x)) #> ! The input point estimate vector is not named. The names provided via the `stat_assignments` list will be used instead. pf$point_estimate #>    mean  #> 2.14802   ## ------------------------------------------------ ## Method `PlausibilityFunction$set_parameter_bounds` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$set_nperms(50) pf$set_point_estimate(point_estimate = mean(y) - mean(x)) #> ! The input point estimate vector is not named. The names provided via the `stat_assignments` list will be used instead. pf$parameters #> $mean #> Mean (quantitative) #> Range: [?, ?] #> Point estimate: 2.21 #>  pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = 0.8 ) #> ℹ Setting new maximum confidence level in field `$max_conf_level`. #> ℹ Computing a confidence interval with confidence level 0.8 for parameter mean... pf$parameters #> $mean #> Mean (quantitative) #> Range: [1.78, 2.85] #> Point estimate: 2.21 #>   ## ------------------------------------------------ ## Method `PlausibilityFunction$set_grid` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$set_nperms(50) pf$set_point_estimate(mean(y) - mean(x)) #> ! The input point estimate vector is not named. The names provided via the `stat_assignments` list will be used instead. pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = 0.8 ) #> ℹ Setting new maximum confidence level in field `$max_conf_level`. #> ℹ Computing a confidence interval with confidence level 0.8 for parameter mean... pf$set_grid(   parameters = pf$parameters,   npoints = 2L ) #> ℹ Setting new grid size in field `$npoints`.  ## ------------------------------------------------ ## Method `PlausibilityFunction$evaluate_grid` ## ------------------------------------------------  x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {   purrr::map(y, ~ .x - parameters[1]) } stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$set_nperms(50) pf$set_point_estimate(mean(y) - mean(x)) #> ! The input point estimate vector is not named. The names provided via the `stat_assignments` list will be used instead. pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = 0.8 ) #> ℹ Setting new maximum confidence level in field `$max_conf_level`. #> ℹ Computing a confidence interval with confidence level 0.8 for parameter mean... pf$set_grid(   parameters = pf$parameters,   npoints = 2L ) #> ℹ Setting new grid size in field `$npoints`. pf$evaluate_grid(grid = pf$grid) #> ℹ Evaluating grid."},{"path":"https://permaverse.github.io/flipr/reference/anova-stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Statistics for the (M)ANOVA Problem — anova-stats","title":"Test Statistics for the (M)ANOVA Problem — anova-stats","text":"collection functions provide test statistics used permutation scheme performing (M)ANOVA. test statistics can divided two categories: traditional statistics use empirical moments inter-point statistics rely pairwise dissimilarities data points.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova-stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistics for the (M)ANOVA Problem — anova-stats","text":"","code":"stat_anova_f(data, memberships, ...)  stat_anova_f_ip(data, memberships, ...)"},{"path":"https://permaverse.github.io/flipr/reference/anova-stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistics for the (M)ANOVA Problem — anova-stats","text":"data Either list n pooled data points dissimilarity matrix stored dist object inter-point statistics whose function name end _ip(). memberships integer vector specifying membership data point. ... Extra parameters specific statistics.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova-stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Statistics for the (M)ANOVA Problem — anova-stats","text":"numeric value storing value test statistic given (possibly permuted) memberships specified memberships.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova-stats.html","id":"traditional-test-statistics","dir":"Reference","previous_headings":"","what":"Traditional Test Statistics","title":"Test Statistics for the (M)ANOVA Problem — anova-stats","text":"stat_anova_f() implements F statistic used traditional (M)ANOVA.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova-stats.html","id":"inter-point-test-statistics","dir":"Reference","previous_headings":"","what":"Inter-Point Test Statistics","title":"Test Statistics for the (M)ANOVA Problem — anova-stats","text":"stat_anova_f_ip() implements pseudo F statistic based inter-point distances described Shinohara et al. (2020).","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova-stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test Statistics for the (M)ANOVA Problem — anova-stats","text":"Chambers, J. M., Freeny, Heiberger, R. M. (1992) Analysis variance; designed experiments. Chapter 5 Statistical Models S eds J. M. Chambers T. J. Hastie, Wadsworth & Brooks/Cole. Krzanowski, W. J. (1988) Principles Multivariate Analysis. User's Perspective. Oxford. Hand, D. J. Taylor, C. C. (1987) Multivariate Analysis Variance Repeated Measures. Chapman Hall. Shinohara, Russell T., et al. \"Distance‐based analysis variance brain connectivity.\" Biometrics 76.1 (2020): 257-269.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova-stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Statistics for the (M)ANOVA Problem — anova-stats","text":"","code":"npk2 <- npk npk2$foo <- rnorm(24) n <- nrow(npk2) data1 <- purrr::array_tree(npk2$yield, margin = 1) stat_anova_f(data1, npk2$block) #> [1] 2.318386 data2 <- purrr::array_tree(cbind(npk2$yield, npk2$foo), margin = 1) stat_anova_f(data2, npk2$block) #> [1] 1.313078 D <- dist(cbind(npk2$yield, npk2$foo)) stat_anova_f_ip(D, npk2$block) #> [1] 1.805599"},{"path":"https://permaverse.github.io/flipr/reference/anova_test.html","id":null,"dir":"Reference","previous_headings":"","what":"(M)ANOVA Permutation Test — anova_test","title":"(M)ANOVA Permutation Test — anova_test","text":"function carries hypothesis test null hypothesis K samples governed underlying generative probability distribution alternative hypothesis governed different generative probability distributions.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(M)ANOVA Permutation Test — anova_test","text":"","code":"anova_test(   data,   memberships,   stats = list(stat_anova_f_ip),   B = 1000L,   M = NULL,   alternative = \"right_tail\",   combine_with = \"tippett\",   type = \"exact\",   seed = NULL,   ... )"},{"path":"https://permaverse.github.io/flipr/reference/anova_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(M)ANOVA Permutation Test — anova_test","text":"data numeric vector numeric matrix list specifying pooled data points. Alternatively, can distance matrix stored object class stats::dist, case test statistics based inter-point distances (marked _ip suffix) used. memberships integer vector specifying original membership data point. stats list functions produced rlang::as_function() specifying chosen test statistic(s). number test statistic functions implemented package can used . Alternatively, one can provide implementation test statistics (s)deems relevant problem hand. See section User-supplied statistic function information user-supplied functions structured compatibility flipr framework. Defaults list(stat_anova_f_ip). B number sampled permutations. Default 1000L. M total number possible permutations. Defaults NULL, means automatically computed given sample size(s). alternative single string character vector specifying whether p-value right-tailed, left-tailed two-tailed. Choices \"right_tail\", \"left_tail\" \"two_tail\". Default \"two_tail\". single string provided, assumed applied test statistics provided user. Alternative, length alternative match length stats parameter assumed one--one correspondence. Defaults \"right_tail\". combine_with string specifying combining function used compute single test statistic value set p-value estimates obtained non-parametric combination testing procedure. now, choices either \"tippett\" \"fisher\". Defaults \"tippett\", picks Tippett's function. type string specifying formula used compute p-value. Choices exact, upper_bound estimate. See Phipson & Smith (2010) details. Defaults \"exact\". seed integer specifying seed random generator useful result reproducibility method comparisons. Default NULL. ... Extra parameters specific statistics.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(M)ANOVA Permutation Test — anova_test","text":"base::list 4 components: observed: value (possible combined) test statistic(s) using original memberhips data points; pvalue: permutation p-value; null_distribution: values (possible combined) test statistic(s) using permuted memberhips data points; permutations: permutations effectively sampled produce null distribution.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova_test.html","id":"user-supplied-statistic-function","dir":"Reference","previous_headings":"","what":"User-supplied statistic function","title":"(M)ANOVA Permutation Test — anova_test","text":"user-specified function least two arguments: first argument either list n pooled data points dissimilarity matrix stored stats::dist object. second argument shoud integer vector specifying (possibly permuted) membership data point. See stat_anova_f() function example.","code":""},{"path":"https://permaverse.github.io/flipr/reference/anova_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(M)ANOVA Permutation Test — anova_test","text":"","code":"out1 <- anova_test(   data = dist(chickwts$weight),   memberships = chickwts$feed,   stats = list(stat_anova_f_ip) ) out1$pvalue #> [1] 0.000999001  out2 <- anova_test(   data = chickwts$weight,   memberships = chickwts$feed,   stats = list(stat_anova_f) ) out2$pvalue #> [1] 0.000999001"},{"path":"https://permaverse.github.io/flipr/reference/flipr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"flipr: Flexible inference via permutations in R — flipr-package","title":"flipr: Flexible inference via permutations in R — flipr-package","text":"flipr package provides flexible permutation framework making inference point estimation, confidence intervals hypothesis testing, kind data, univariate, multivariate, complex network-valued data, topological data, functional data density-valued data.","code":""},{"path":[]},{"path":"https://permaverse.github.io/flipr/reference/flipr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"flipr: Flexible inference via permutations in R — flipr-package","text":"Maintainer: Aymeric Stamm aymeric.stamm@cnrs.fr (ORCID) Authors: Alessia Pini alessia.pini@unicatt.Simone Vantini simone.vantini@polimi.contributors: Juliette Chiapello [contributor] Manon Simonot manon.simonot@univ-nantes.fr [contributor]","code":""},{"path":"https://permaverse.github.io/flipr/reference/grid_biregular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a biregular grid around a center point — grid_biregular","title":"Create a biregular grid around a center point — grid_biregular","text":"Biregular grids can created number parameter objects.","code":""},{"path":"https://permaverse.github.io/flipr/reference/grid_biregular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a biregular grid around a center point — grid_biregular","text":"","code":"grid_biregular(   x,   ...,   center = NULL,   levels = 3,   original = TRUE,   filter = NULL )"},{"path":"https://permaverse.github.io/flipr/reference/grid_biregular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a biregular grid around a center point — grid_biregular","text":"x param object, list, parameters. ... One param objects (mtry() penalty()). None objects can unknown() values parameter ranges values. center numeric vector specifying point onto biregular grid centered. Defaults NULL, case grid_regular used instead. levels integer number values parameter use make regular grid. levels can single integer vector integers length number parameters .... levels can named integer vector, names match id values parameters. original logical: parameters original units transformed space ()? filter logical: parameters filtered prior generating grid. Must single expression referencing parameter names evaluates logical vector.","code":""},{"path":"https://permaverse.github.io/flipr/reference/grid_biregular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a biregular grid around a center point — grid_biregular","text":"tibble. columns parameter row every parameter combination.","code":""},{"path":"https://permaverse.github.io/flipr/reference/grid_biregular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a biregular grid around a center point — grid_biregular","text":"Note may difference grids depending function called. call uses parameter objects directly possible ranges come objects dials. example:         However, cases, parsnip recipe packages overrides default ranges specific models preprocessing steps. grid function uses parameters object created model recipe, ranges may different defaults (specific models). Using example , mixture argument different glmnet models:","code":"mixture() ## Proportion of Lasso Penalty (quantitative) ## Range: [0, 1] set.seed(283) mix_grid_1 <- grid_random(mixture(), size = 1000) range(mix_grid_1$mixture) ## [1] 0.001490161 0.999741096 library(parsnip) library(tune)  # When used with glmnet, the range is [0.05, 1.00] glmn_mod <-   linear_reg(mixture = tune()) %>%   set_engine(\"glmnet\")  set.seed(283) mix_grid_2 <- grid_random(extract_parameter_set_dials(glmn_mod), size = 1000) range(mix_grid_2$mixture) ## [1] 0.05141565 0.99975404"},{"path":"https://permaverse.github.io/flipr/reference/grid_biregular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a biregular grid around a center point — grid_biregular","text":"","code":"grid_biregular(dials::mixture(), center = 0.2) #> # A tibble: 3 × 1 #>   mixture #>     <dbl> #> 1     0   #> 2     0.2 #> 3     1"},{"path":"https://permaverse.github.io/flipr/reference/one-sample-stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Statistics for the One-Sample Problem — one-sample-stats","title":"Test Statistics for the One-Sample Problem — one-sample-stats","text":"collection functions provide test statistics used permutation scheme performing one-sample testing.","code":""},{"path":"https://permaverse.github.io/flipr/reference/one-sample-stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistics for the One-Sample Problem — one-sample-stats","text":"","code":"stat_max(data, flips, ...)"},{"path":"https://permaverse.github.io/flipr/reference/one-sample-stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistics for the One-Sample Problem — one-sample-stats","text":"data list storing sample user wants make inference. flips numeric vectors -1s 1s used randomly flip data points around center symmetric distribution sample. ... Extra parameters specific statistics.","code":""},{"path":"https://permaverse.github.io/flipr/reference/one-sample-stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Statistics for the One-Sample Problem — one-sample-stats","text":"numeric value evaluating desired test statistic.","code":""},{"path":"https://permaverse.github.io/flipr/reference/one-sample-stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Statistics for the One-Sample Problem — one-sample-stats","text":"","code":"n <- 10 x <- as.list(rnorm(n)) flips <- sample(c(-1, 1), n, replace = TRUE) stat_max(x, flips) #> [1] 0.6098022"},{"path":"https://permaverse.github.io/flipr/reference/one_sample_test.html","id":null,"dir":"Reference","previous_headings":"","what":"One-Sample Permutation Test — one_sample_test","title":"One-Sample Permutation Test — one_sample_test","text":"function carries hypothesis test null hypothesis sample governed generative probability distribution centered symmetric alternative hypothesis governed probability distribution either centered symmetric.","code":""},{"path":"https://permaverse.github.io/flipr/reference/one_sample_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-Sample Permutation Test — one_sample_test","text":"","code":"one_sample_test(   x,   stats = list(stat_max),   B = 1000L,   M = NULL,   alternative = \"two_tail\",   combine_with = \"tippett\",   type = \"exact\",   seed = NULL,   ... )"},{"path":"https://permaverse.github.io/flipr/reference/one_sample_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-Sample Permutation Test — one_sample_test","text":"x numeric vector numeric matrix list representing sample user wants make inference. stats list functions produced as_function specifying chosen test statistic(s). number test statistic functions implemented package can used . Alternatively, one can provide implementation test statistics (s)deems relevant problem hand. See section User-supplied statistic function information user-supplied functions structured compatibility flipr framework. Default list(stat_t). B number sampled permutations. Default 1000L. M total number possible permutations. Defaults NULL, means automatically computed given sample size(s). alternative single string character vector specifying whether p-value right-tailed, left-tailed two-tailed. Choices \"right_tail\", \"left_tail\" \"two_tail\". Default \"two_tail\". single string provided, assumed applied test statistics provided user. Alternative, length alternative match length stats parameter assumed one--one correspondence. combine_with string specifying combining function used compute single test statistic value set p-value estimates obtained non-parametric combination testing procedure. now, choices either \"tippett\" \"fisher\". Default \"tippett\", picks Tippett's function. type string specifying formula used compute p-value. Choices exact (default), upper_bound estimate. See Phipson & Smith (2010) details. seed integer specifying seed random generator useful result reproducibility method comparisons. Default NULL. ... Extra parameters specific statistics.","code":""},{"path":"https://permaverse.github.io/flipr/reference/one_sample_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-Sample Permutation Test — one_sample_test","text":"list three components: value statistic original two samples, p-value resulting permutation test numeric vector storing values permuted statistics.","code":""},{"path":"https://permaverse.github.io/flipr/reference/one_sample_test.html","id":"user-supplied-statistic-function","dir":"Reference","previous_headings":"","what":"User-supplied statistic function","title":"One-Sample Permutation Test — one_sample_test","text":"user-specified function least two arguments: first argument data list n observations sample; second argument flips integer vector giving signs observation data multiplied. possible use use_stat function nsamples = 1 flipr automatically generate template file writing test statistics way makes compatible flipr framework. See stat_max function example.","code":""},{"path":"https://permaverse.github.io/flipr/reference/one_sample_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-Sample Permutation Test — one_sample_test","text":"","code":"n <- 10L mu <- 3 sigma <- 1  # Sample under the null distribution x1 <- rnorm(n = n, mean = 0, sd = sigma) t1 <- one_sample_test(x1, B = 100L) t1$pvalue #> [1] 0.712383  # Sample under some alternative distribution x2 <- rnorm(n = n, mean = mu, sd = sigma) t2 <- one_sample_test(x2, B = 100L) t2$pvalue #> [1] 0"},{"path":"https://permaverse.github.io/flipr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://permaverse.github.io/flipr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://permaverse.github.io/flipr/reference/plot_pf.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of Plausibility Functions — plot_pf","title":"Visualization of Plausibility Functions — plot_pf","text":"function plots plausibility function two parameters interest.","code":""},{"path":"https://permaverse.github.io/flipr/reference/plot_pf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of Plausibility Functions — plot_pf","text":"","code":"plot_pf(pf, alpha = 0.05, ngrid = 10, subtitle = \"\")"},{"path":"https://permaverse.github.io/flipr/reference/plot_pf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of Plausibility Functions — plot_pf","text":"pf PlausibilityFunction object. alpha numeric value specifying significance level contrast plausibility function . Defaults 0.05. ngrid integer specifying grid size plausibility function evaluated. Specifically K number parameters investigation, grid size (ngrid + 1)^K. Defaults 10L. subtitle string specifying subtitle plot. Defaults \"\" leading subtitle.","code":""},{"path":"https://permaverse.github.io/flipr/reference/plot_pf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of Plausibility Functions — plot_pf","text":"ggplot object.","code":""},{"path":"https://permaverse.github.io/flipr/reference/plot_pf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualization of Plausibility Functions — plot_pf","text":"","code":"x <- rnorm(10) y <- rnorm(10, mean = 2) null_spec <- function(y, parameters) {purrr::map(y, ~ .x - parameters[1])} stat_functions <- list(stat_t) stat_assignments <- list(mean = 1) pf <- PlausibilityFunction$new(   null_spec = null_spec,   stat_functions = stat_functions,   stat_assignments = stat_assignments,   x, y ) #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. pf$set_nperms(50) pf$set_point_estimate(mean(y) - mean(x)) #> ! The input point estimate vector is not named. The names provided via the `stat_assignments` list will be used instead. pf$set_parameter_bounds(   point_estimate = pf$point_estimate,   conf_level = 0.8 ) #> ℹ Setting new maximum confidence level in field `$max_conf_level`. #> ℹ Computing a confidence interval with confidence level 0.8 for parameter mean... pf$set_grid(   parameters = pf$parameters,   npoints = 2L ) #> ℹ Setting new grid size in field `$npoints`. pf$evaluate_grid(grid = pf$grid) #> ℹ Evaluating grid. plot_pf(pf)"},{"path":"https://permaverse.github.io/flipr/reference/two-sample-stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Statistics for the Two-Sample Problem — two-sample-stats","title":"Test Statistics for the Two-Sample Problem — two-sample-stats","text":"collection functions provide test statistics used permutation scheme performing two-sample testing. test statistics can divided two categories: traditional statistics use empirical moments inter-point statistics rely pairwise dissimilarities data points.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two-sample-stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistics for the Two-Sample Problem — two-sample-stats","text":"","code":"stat_welch(data, indices1, ...)  stat_student(data, indices1, ...)  stat_t(data, indices1, ...)  stat_fisher(data, indices1, ...)  stat_f(data, indices1, ...)  stat_mean(data, indices1, ...)  stat_hotelling(data, indices1, ...)  stat_bs(data, indices1, ...)  stat_student_ip(data, indices1, ...)  stat_t_ip(data, indices1, ...)  stat_fisher_ip(data, indices1, ...)  stat_f_ip(data, indices1, ...)  stat_bg_ip(data, indices1, ...)  stat_energy_ip(data, indices1, alpha = 1L, ...)  stat_cq_ip(data, indices1, ...)  stat_mod_ip(data, indices1, ...)  stat_dom_ip(data, indices1, standardize = TRUE, ...)"},{"path":"https://permaverse.github.io/flipr/reference/two-sample-stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistics for the Two-Sample Problem — two-sample-stats","text":"data Either list n1 + n2 concatenated observations original n1 observations first sample top original n2 observations second sample . dissimilarity matrix stored dist object inter-point statistics whose function name end _ip(). indices1 integer vector specifying indices data considered belong first sample. ... Extra parameters specific statistics. alpha scalar value specifying power dissimilarities elevated computation inter-point energy statistic. Default 1L. standardize boolean specifying whether distance medoids stat_dom_ip function normalized pooled corresponding variances. Default TRUE.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two-sample-stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Statistics for the Two-Sample Problem — two-sample-stats","text":"real scalar giving value test statistic permutation specified integer vector indices.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two-sample-stats.html","id":"traditional-test-statistics","dir":"Reference","previous_headings":"","what":"Traditional Test Statistics","title":"Test Statistics for the Two-Sample Problem — two-sample-stats","text":"stat_hotelling implements Hotelling's \\(T^2\\) statistic multivariate data \\(p < n\\). stat_student stat_t implements Student's statistic (originally assuming equal variances thus using pooled empirical variance estimator). See t.test details. stat_welch implements Student-Welch statistic essentially modification Student's statistic accounting unequal variances. See t.test details. stat_fisher stat_f implements Fisher's variance ratio statistic. See var.test details. stat_mean implements statistic computes difference means. stat_bs implements statistic proposed Bai & Saranadasa (1996) high-dimensional multivariate data.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two-sample-stats.html","id":"inter-point-test-statistics","dir":"Reference","previous_headings":"","what":"Inter-Point Test Statistics","title":"Test Statistics for the Two-Sample Problem — two-sample-stats","text":"stat_student_ip stat_t_ip implements Student-like test statistic based inter-point distances described Lovato et al. (2020). stat_fisher_ip stat_f_ip implements Fisher-like test statistic based inter-point distances described Lovato et al. (2020). stat_bg_ip implements statistic proposed Biswas & Ghosh (2014). stat_energy_ip implements class energy-based statistics described Székely & Rizzo (2013); stat_cq_ip implements statistic proposed Chen & Qin (2010). stat_mod_ip implements statistic computes mean inter-point distances. stat_dom_ip implements statistic computes distance medoids two samples, possibly standardized pooled corresponding variances.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two-sample-stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test Statistics for the Two-Sample Problem — two-sample-stats","text":"Bai, Z., & Saranadasa, H. (1996). Effect high dimension: example two sample problem. Statistica Sinica, 311-329. Lovato, ., Pini, ., Stamm, ., & Vantini, S. (2020). Model-free two-sample test network-valued data. Computational Statistics & Data Analysis, 144, 106896. Biswas, M., & Ghosh, . K. (2014). nonparametric two-sample test applicable high dimensional data. Journal Multivariate Analysis, 123, 160-171. Székely, G. J., & Rizzo, M. L. (2013). Energy statistics: class statistics based distances. Journal statistical planning inference, 143(8), 1249-1272. Chen, S. X., & Qin, Y. L. (2010). two-sample test high-dimensional data applications gene-set testing. Annals Statistics, 38(2), 808-835.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two-sample-stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Statistics for the Two-Sample Problem — two-sample-stats","text":"","code":"n <- 10L mx <- 0 sigma <- 1 delta <- 10 my <- mx + delta x <- rnorm(n = n, mean = mx, sd = sigma) y <- rnorm(n = n, mean = my, sd = sigma) D <- dist(c(x, y))  x <- as.list(x) y <- as.list(y)  stat_welch(c(x, y), 1:n) #> [1] -22.40635 stat_t(c(x, y), 1:n) #> [1] 22.40635 stat_f(c(x, y), 1:n) #> [1] 1.625238 stat_mean(c(x, y), 1:n) #> [1] -10.54055 stat_hotelling(c(x, y), 1:n) #> [1] 100.4089 stat_bs(c(x, y), 1:n) #> [1] 110.904  stat_t_ip(D, 1:n) #> [1] 501.0447 stat_f_ip(D, 1:n) #> [1] 1.625238 stat_bg_ip(D, 1:n) #> [1] 174.8656 stat_energy_ip(D, 1:n) #> [1] 9.469125 stat_cq_ip(D, 1:n) #> [1] -18.70016 stat_mod_ip(D, 1:n) #> [1] 10.54055 stat_dom_ip(D, 1:n) #> [1] 10.12451"},{"path":"https://permaverse.github.io/flipr/reference/two_sample_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-Sample Permutation Test — two_sample_test","title":"Two-Sample Permutation Test — two_sample_test","text":"function carries hypothesis test null hypothesis two samples governed underlying generative probability distribution alternative hypothesis governed two different generative probability distributions.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two_sample_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-Sample Permutation Test — two_sample_test","text":"","code":"two_sample_test(   x,   y,   stats = list(stat_t),   B = 1000L,   M = NULL,   alternative = \"two_tail\",   combine_with = \"tippett\",   type = \"exact\",   seed = NULL,   ... )"},{"path":"https://permaverse.github.io/flipr/reference/two_sample_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-Sample Permutation Test — two_sample_test","text":"x numeric vector numeric matrix list representing 1st sample. Alternatively, can distance matrix stored object class dist, case test statistics based inter-point distances (marked _ip suffix) used. y numeric vector x numeric vector, numeric matrix x numeric matrix, list x list, representing second sample. Alternatively, x object class dist, numeric scalar specifying size first sample. stats list functions produced as_function specifying chosen test statistic(s). number test statistic functions implemented package can used . Alternatively, one can provide implementation test statistics (s)deems relevant problem hand. See section User-supplied statistic function information user-supplied functions structured compatibility flipr framework. Default list(stat_t). B number sampled permutations. Default 1000L. M total number possible permutations. Defaults NULL, means automatically computed given sample size(s). alternative single string character vector specifying whether p-value right-tailed, left-tailed two-tailed. Choices \"right_tail\", \"left_tail\" \"two_tail\". Default \"two_tail\". single string provided, assumed applied test statistics provided user. Alternative, length alternative match length stats parameter assumed one--one correspondence. combine_with string specifying combining function used compute single test statistic value set p-value estimates obtained non-parametric combination testing procedure. now, choices either \"tippett\" \"fisher\". Default \"tippett\", picks Tippett's function. type string specifying formula used compute p-value. Choices exact (default), upper_bound estimate. See Phipson & Smith (2010) details. seed integer specifying seed random generator useful result reproducibility method comparisons. Default NULL. ... Extra parameters specific statistics.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two_sample_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-Sample Permutation Test — two_sample_test","text":"list three components: value statistic original two samples, p-value resulting permutation test numeric vector storing values permuted statistics.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two_sample_test.html","id":"user-supplied-statistic-function","dir":"Reference","previous_headings":"","what":"User-supplied statistic function","title":"Two-Sample Permutation Test — two_sample_test","text":"user-specified function least two arguments: first argument data list n1 + n2 concatenated observations original n1 observations first sample top original n2 observations second sample ; second argument perm_data integer vector giving indices data considered belong first sample. possible use use_stat function nsamples = 2 flipr automatically generate template file writing test statistics way makes compatible flipr framework. See stat_t function example.","code":""},{"path":"https://permaverse.github.io/flipr/reference/two_sample_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-Sample Permutation Test — two_sample_test","text":"","code":"n <- 10L mx <- 0 sigma <- 1  # Two different models for the two populations x <- rnorm(n = n, mean = mx, sd = sigma) delta <- 10 my <- mx + delta y <- rnorm(n = n, mean = my, sd = sigma) t1 <- two_sample_test(x, y) t1$pvalue #> [1] 0.9870103  # Same model for the two populations x <- rnorm(n = n, mean = mx, sd = sigma) delta <- 0 my <- mx + delta y <- rnorm(n = n, mean = my, sd = sigma) t2 <- two_sample_test(x, y) t2$pvalue #> [1] 0.9750223"},{"path":"https://permaverse.github.io/flipr/reference/use_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Statistic Template — use_stat","title":"Test Statistic Template — use_stat","text":"function helper automatically generate .R file populated skeleton typical test function compatible flipr.","code":""},{"path":"https://permaverse.github.io/flipr/reference/use_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistic Template — use_stat","text":"","code":"use_stat(nsamples = 1, stat_name = \"mystat\")"},{"path":"https://permaverse.github.io/flipr/reference/use_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistic Template — use_stat","text":"nsamples integer specifying number samples used. Defaults 1L. Currently works one- two-sample problems. stat_name string specifying name test statistic implemented. Defaults mystat.","code":""},{"path":"https://permaverse.github.io/flipr/reference/use_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Statistic Template — use_stat","text":"Creates dedicated .R file template code function implements test statistic saves R/ folder package.","code":""},{"path":"https://permaverse.github.io/flipr/reference/use_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Statistic Template — use_stat","text":"","code":"if (FALSE) { # \\dontrun{ use_stat() } # }"},{"path":[]},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"flipr-033","dir":"Changelog","previous_headings":"","what":"flipr 0.3.3","title":"flipr 0.3.3","text":"CRAN release: 2023-08-23 Updated URLs DESCRIPTION file; Properly documented package overview flipr-package.R file; Updated GitHub Action workflows; Removed suggested dependency entire tidyverse; Updated maintainer email.","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"flipr-032","dir":"Changelog","previous_headings":"","what":"flipr 0.3.2","title":"flipr 0.3.2","text":"CRAN release: 2022-07-18 Removed akima package dependencies. Updated GHA workflows roxygen2 version. Updated URLs reflect change ownership.","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"flipr-031","dir":"Changelog","previous_headings":"","what":"flipr 0.3.1","title":"flipr 0.3.1","text":"CRAN release: 2021-09-16 Remove occurrence base-R pipe operator favor magrittr pipe operator now backward compatibility older versions R. Improved way handling statistics rely inter-point distances. Method $get_value() gains optional arguments keep_null_distribution keep_permutations case user like keep track either permutation null distribution sampled permutations used produce . Method $get_value() now handles extra parameters passed test statistics.","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"flipr-030","dir":"Changelog","previous_headings":"","what":"flipr 0.3.0","title":"flipr 0.3.0","text":"CRAN release: 2021-09-01","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"flipr 0.3.0","text":"API changed: R6 class now used define plausibility function, methods implement point estimation, confidence intervals evaluation grid later plotting. plotting capability still outside class might move class methods well future.","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"minor-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"flipr 0.3.0","text":"Test statistics based Inter-point distances added implemented C++ Rcpp package. Test coverage set achieves 20% coverage now (#3, @C-Juliette). @C-Juliette added contributor package. p-value function consistently renamed plausibility function better reflects stands avoid confusion definitions p-value function area functional data analysis.","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"flipr-021","dir":"Changelog","previous_headings":"","what":"flipr 0.2.1","title":"flipr 0.2.1","text":"CRAN release: 2021-03-08 Fix warning installing package Oracle Solaris 10, x86, 32 bit, R-release due pandoc version available preventing pvalue-function vignette knitting properly.","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"flipr-020","dir":"Changelog","previous_headings":"","what":"flipr 0.2.0","title":"flipr 0.2.0","text":"CRAN release: 2021-03-06","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"flipr 0.2.0","text":"Compute p-value surfaces inferring multiple parameters via two_sample_pf(); Compute point estimation single parameter interest via two_sample_pe(); Compute confidence interval single parameter interest via two_sample_ci(); Automatically draw p-value function single parameter interest via two_sample_viz().","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"full-list-of-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Full list of changes","title":"flipr 0.2.0","text":"Change argument names test combining_function type combine_with respectively. Add argument alternative specify kind test performed. Add function compute p-value functions sets null hypotheses. Draft article illustrating computation p-value functions flipr. Add tt, mean Fisher test statistics. Correct two-tail p-value computation. Better API pvalue function. Added function two sample confidence interval single parameter. Added article permutation inference overview. Added dependency ggplot2 package plotting features. Added dependency cli package displaying important information user elegant fashion. Added function point estimation single parameter. Added function confidence interval single parameter. Added function automatic plotting p-value function single parameter. Added dependency withr package properly handle local random seed generator settings. Added dependency viridisLite package using colors compatible common types color blindness.","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"flipr-011","dir":"Changelog","previous_headings":"","what":"flipr 0.1.1","title":"flipr 0.1.1","text":"CRAN release: 2021-02-17 Fix warning installing package Oracle Solaris 10, x86, 32 bit, R-release due pandoc version available. Switch GPL-3 license purrr dependency GPL-3 licensed.","code":""},{"path":"https://permaverse.github.io/flipr/news/index.html","id":"flipr-010","dir":"Changelog","previous_headings":"","what":"flipr 0.1.0","title":"flipr 0.1.0","text":"CRAN release: 2021-02-16 Initial release. Added NEWS.md file track changes package.","code":""}]
